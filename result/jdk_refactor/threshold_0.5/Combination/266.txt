/** 
 * Convenience method to get the array of objects from the TreePath instance that this event wraps.
 * @return an array of Objects, where the first Object is the onestored at the root and the last object is the one stored at the node identified by the path
 */
public Object[] getPath(){
  if (path != null)   return path.getPath();
  return null;
}

/** 
 * Returns the objects that are children of the node identified by <code>getPath</code> at the locations specified by <code>getChildIndices</code>. If this is a removal event the returned objects are no longer children of the parent node.
 * @return an array of Object containing the children specified bythe event
 * @see #getPath
 * @see #getChildIndices
 */
public Object[] getChildren(){
  if (children != null) {
    int cCount=children.length;
    Object[] retChildren=new Object[cCount];
    System.arraycopy(children,0,retChildren,0,cCount);
    return retChildren;
  }
  return null;
}

-->
void getPath_getChildren(int combFlag){
  if (combFlag == 1) {
    if (path != null)     return path.getPath();
  }
 else {
    if (children != null) {
      int cCount=children.length;
      Object[] retChildren=new Object[cCount];
      System.arraycopy(children,0,retChildren,0,cCount);
      return retChildren;
    }
  }
  return null;
}
