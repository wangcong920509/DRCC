/** 
 * @deprecated As of JDK version 1.1,replaced by <code>getPreferredSize()</code>.
 */
@Deprecated public Dimension preferredSize(){
  Dimension dim=prefSize;
  if (dim == null || !(isPreferredSizeSet() || isValid())) {
synchronized (getTreeLock()) {
      prefSize=(layoutMgr != null) ? layoutMgr.preferredLayoutSize(this) : super.preferredSize();
      dim=prefSize;
    }
  }
  if (dim != null) {
    return new Dimension(dim);
  }
 else {
    return dim;
  }
}

/** 
 * @deprecated As of JDK version 1.1,replaced by <code>getMinimumSize()</code>.
 */
@Deprecated public Dimension minimumSize(){
  Dimension dim=minSize;
  if (dim == null || !(isMinimumSizeSet() || isValid())) {
synchronized (getTreeLock()) {
      minSize=(layoutMgr != null) ? layoutMgr.minimumLayoutSize(this) : super.minimumSize();
      dim=minSize;
    }
  }
  if (dim != null) {
    return new Dimension(dim);
  }
 else {
    return dim;
  }
}

-->
void preferredSize_minimumSize(int combFlag){
  if (combFlag == 1) {
    Dimension dim=prefSize;
    if (dim == null || !(isPreferredSizeSet() || isValid())) {
synchronized (getTreeLock()) {
        prefSize=(layoutMgr != null) ? layoutMgr.preferredLayoutSize(this) : super.preferredSize();
        dim=prefSize;
      }
    }
  }
 else {
    Dimension dim=minSize;
    if (dim == null || !(isMinimumSizeSet() || isValid())) {
synchronized (getTreeLock()) {
        minSize=(layoutMgr != null) ? layoutMgr.minimumLayoutSize(this) : super.minimumSize();
        dim=minSize;
      }
    }
  }
  if (dim != null) {
    return new Dimension(dim);
  }
 else {
    return dim;
  }
}
