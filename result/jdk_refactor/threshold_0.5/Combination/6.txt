protected boolean initializeComponentsFromAny(){
  try {
    InputStream input=any.create_input_stream();
    Any discriminatorAny=DynAnyUtil.extractAnyFromStream(discriminatorType(),input,orb);
    discriminator=DynAnyUtil.createMostDerivedDynAny(discriminatorAny,orb,false);
    currentMemberIndex=currentUnionMemberIndex(discriminatorAny);
    Any memberAny=DynAnyUtil.extractAnyFromStream(memberType(currentMemberIndex),input,orb);
    currentMember=DynAnyUtil.createMostDerivedDynAny(memberAny,orb,false);
    components=new DynAny[]{discriminator,currentMember};
  }
 catch (  InconsistentTypeCode ictc) {
  }
  return true;
}

protected boolean initializeComponentsFromTypeCode(){
  try {
    discriminator=DynAnyUtil.createMostDerivedDynAny(memberLabel(0),orb,false);
    index=0;
    currentMemberIndex=0;
    currentMember=DynAnyUtil.createMostDerivedDynAny(memberType(0),orb);
    components=new DynAny[]{discriminator,currentMember};
  }
 catch (  InconsistentTypeCode ictc) {
  }
  return true;
}

-->
void initializeComponentsFromAny_initializeComponentsFromTypeCode(int combFlag){
  if (combFlag == 1) {
    try {
      InputStream input=any.create_input_stream();
      Any discriminatorAny=DynAnyUtil.extractAnyFromStream(discriminatorType(),input,orb);
      discriminator=DynAnyUtil.createMostDerivedDynAny(discriminatorAny,orb,false);
      currentMemberIndex=currentUnionMemberIndex(discriminatorAny);
      Any memberAny=DynAnyUtil.extractAnyFromStream(memberType(currentMemberIndex),input,orb);
      currentMember=DynAnyUtil.createMostDerivedDynAny(memberAny,orb,false);
      components=new DynAny[]{discriminator,currentMember};
    }
 catch (    InconsistentTypeCode ictc) {
    }
  }
 else {
    try {
      discriminator=DynAnyUtil.createMostDerivedDynAny(memberLabel(0),orb,false);
      index=0;
      currentMemberIndex=0;
      currentMember=DynAnyUtil.createMostDerivedDynAny(memberType(0),orb);
      components=new DynAny[]{discriminator,currentMember};
    }
 catch (    InconsistentTypeCode ictc) {
    }
  }
  return true;
}
