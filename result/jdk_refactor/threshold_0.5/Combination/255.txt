/** 
 * Sets the transparency of region bounds for this matcher. <p> Invoking this method with an argument of <tt>true</tt> will set this matcher to use <i>transparent</i> bounds. If the boolean argument is <tt>false</tt>, then <i>opaque</i> bounds will be used. <p> Using transparent bounds, the boundaries of this matcher's region are transparent to lookahead, lookbehind, and boundary matching constructs. Those constructs can see beyond the boundaries of the region to see if a match is appropriate. <p> Using opaque bounds, the boundaries of this matcher's region are opaque to lookahead, lookbehind, and boundary matching constructs that may try to see beyond them. Those constructs cannot look past the boundaries so they will fail to match anything outside of the region. <p> By default, a matcher uses opaque bounds.
 * @param b a boolean indicating whether to use opaque or transparentregions
 * @return this matcher
 * @see java.util.regex.Matcher#hasTransparentBounds
 * @since 1.5
 */
public Matcher useTransparentBounds(boolean b){
  transparentBounds=b;
  return this;
}

/** 
 * Sets the anchoring of region bounds for this matcher. <p> Invoking this method with an argument of <tt>true</tt> will set this matcher to use <i>anchoring</i> bounds. If the boolean argument is <tt>false</tt>, then <i>non-anchoring</i> bounds will be used. <p> Using anchoring bounds, the boundaries of this matcher's region match anchors such as ^ and $. <p> Without anchoring bounds, the boundaries of this matcher's region will not match anchors such as ^ and $. <p> By default, a matcher uses anchoring region boundaries.
 * @param b a boolean indicating whether or not to use anchoring bounds.
 * @return this matcher
 * @see java.util.regex.Matcher#hasAnchoringBounds
 * @since 1.5
 */
public Matcher useAnchoringBounds(boolean b){
  anchoringBounds=b;
  return this;
}

-->
void useTransparentBounds_useAnchoringBounds(boolean b,boolean b,int combFlag){
  if (combFlag == 1) {
    transparentBounds=b;
  }
 else {
    anchoringBounds=b;
  }
  return this;
}
