/** 
 * Adds the shape of the specified <code>Area</code> to the shape of this <code>Area</code>. The resulting shape of this <code>Area</code> will include the union of both shapes, or all areas that were contained in either this or the specified <code>Area</code>. <pre> // Example: Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]); Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]); a1.add(a2); a1(before)     +         a2         =     a1(after) ################     ################     ################ ##############         ##############     ################ ############             ############     ################ ##########                 ##########     ################ ########                     ########     ################ ######                         ######     ######    ###### ####                             ####     ####        #### ##                                 ##     ##            ## </pre>
 * @param rhs  the <code>Area</code> to be added to thecurrent shape
 * @throws NullPointerException if <code>rhs</code> is null
 * @since 1.2
 */
public void add(Area rhs){
  curves=new AreaOp.AddOp().calculate(this.curves,rhs.curves);
  invalidateBounds();
}

/** 
 * Subtracts the shape of the specified <code>Area</code> from the shape of this <code>Area</code>. The resulting shape of this <code>Area</code> will include areas that were contained only in this <code>Area</code> and not in the specified <code>Area</code>. <pre> // Example: Area a1 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 0,8]); Area a2 = new Area([triangle 0,0 =&gt; 8,0 =&gt; 8,8]); a1.subtract(a2); a1(before)     -         a2         =     a1(after) ################     ################ ##############         ##############     ## ############             ############     #### ##########                 ##########     ###### ########                     ########     ######## ######                         ######     ###### ####                             ####     #### ##                                 ##     ## </pre>
 * @param rhs  the <code>Area</code> to be subtracted from thecurrent shape
 * @throws NullPointerException if <code>rhs</code> is null
 * @since 1.2
 */
public void subtract(Area rhs){
  curves=new AreaOp.SubOp().calculate(this.curves,rhs.curves);
  invalidateBounds();
}

-->
void add_subtract(Area rhs,Area rhs,int combFlag){
  if (combFlag == 1) {
    curves=new AreaOp.AddOp().calculate(this.curves,rhs.curves);
  }
 else {
    curves=new AreaOp.SubOp().calculate(this.curves,rhs.curves);
  }
  invalidateBounds();
}
