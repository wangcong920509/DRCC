/** 
 * Returns the start index of a given paren level.
 * @param which Nesting level of subexpression
 * @return String index
 */
public final int getParenStart(int which){
  if (which < parenCount) {
switch (which) {
case 0:
      return start0;
case 1:
    return start1;
case 2:
  return start2;
default :
if (startn == null) {
  allocParens();
}
return startn[which];
}
}
return -1;
}

/** 
 * Returns the length of a given paren level.
 * @param which Nesting level of subexpression
 * @return Number of characters in the parenthesized subexpression
 */
public final int getParenLength(int which){
  if (which < parenCount) {
    return getParenEnd(which) - getParenStart(which);
  }
  return -1;
}

-->
void getParenStart_getParenLength(int which,int which,int combFlag){
  if (combFlag == 1) {
    if (which < parenCount) {
switch (which) {
case 0:
        return start0;
case 1:
      return start1;
case 2:
    return start2;
default :
  if (startn == null) {
    allocParens();
  }
return startn[which];
}
}
}
 else {
if (which < parenCount) {
return getParenEnd(which) - getParenStart(which);
}
}
return -1;
}
