/** 
 * Constructs a <code>DragSourceDragEvent</code>. This class is typically instantiated by the <code>DragSourceContextPeer</code> rather than directly by client code. The coordinates for this <code>DragSourceDragEvent</code> are not specified, so <code>getLocation</code> will return <code>null</code> for this event. <p> The arguments <code>dropAction</code> and <code>action</code> should be one of <code>DnDConstants</code> that represents a single action. The argument <code>modifiers</code> should be either a bitwise mask of old <code>java.awt.event.InputEvent.*_MASK</code> constants or a bitwise mask of extended <code>java.awt.event.InputEvent.*_DOWN_MASK</code> constants. This constructor does not throw any exception for invalid <code>dropAction</code>, <code>action</code> and <code>modifiers</code>.
 * @param dsc the <code>DragSourceContext</code> that is to managenotifications for this event.
 * @param dropAction the user drop action.
 * @param action the target drop action.
 * @param modifiers the modifier keys down during event (shift, ctrl,alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. Use of the extended modifiers is preferred.
 * @throws <code>IllegalArgumentException</code> if <code>dsc</code> is <code>null</code>.
 * @see java.awt.event.InputEvent
 * @see DragSourceEvent#getLocation
 */
public DragSourceDragEvent(DragSourceContext dsc,int dropAction,int action,int modifiers){
  super(dsc);
  targetActions=action;
  gestureModifiers=modifiers;
  this.dropAction=dropAction;
  if ((modifiers & ~(JDK_1_3_MODIFIERS | JDK_1_4_MODIFIERS)) != 0) {
    invalidModifiers=true;
  }
 else   if ((getGestureModifiers() != 0) && (getGestureModifiersEx() == 0)) {
    setNewModifiers();
  }
 else   if ((getGestureModifiers() == 0) && (getGestureModifiersEx() != 0)) {
    setOldModifiers();
  }
 else {
    invalidModifiers=true;
  }
}
/** 
 * Constructs a <code>DragSourceDragEvent</code> given the specified <code>DragSourceContext</code>, user drop action, target drop action, modifiers and coordinates. <p> The arguments <code>dropAction</code> and <code>action</code> should be one of <code>DnDConstants</code> that represents a single action. The argument <code>modifiers</code> should be either a bitwise mask of old <code>java.awt.event.InputEvent.*_MASK</code> constants or a bitwise mask of extended <code>java.awt.event.InputEvent.*_DOWN_MASK</code> constants. This constructor does not throw any exception for invalid <code>dropAction</code>, <code>action</code> and <code>modifiers</code>.
 * @param dsc the <code>DragSourceContext</code> associated with thisevent.
 * @param dropAction the user drop action.
 * @param action the target drop action.
 * @param modifiers the modifier keys down during event (shift, ctrl,alt, meta) Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. Use of the extended modifiers is preferred.
 * @param x   the horizontal coordinate for the cursor location
 * @param y   the vertical coordinate for the cursor location
 * @throws <code>IllegalArgumentException</code> if <code>dsc</code> is <code>null</code>.
 * @see java.awt.event.InputEvent
 * @since 1.4
 */
public DragSourceDragEvent(DragSourceContext dsc,int dropAction,int action,int modifiers,int x,int y){
  super(dsc,x,y);
  targetActions=action;
  gestureModifiers=modifiers;
  this.dropAction=dropAction;
  if ((modifiers & ~(JDK_1_3_MODIFIERS | JDK_1_4_MODIFIERS)) != 0) {
    invalidModifiers=true;
  }
 else   if ((getGestureModifiers() != 0) && (getGestureModifiersEx() == 0)) {
    setNewModifiers();
  }
 else   if ((getGestureModifiers() == 0) && (getGestureModifiersEx() != 0)) {
    setOldModifiers();
  }
 else {
    invalidModifiers=true;
  }
}
