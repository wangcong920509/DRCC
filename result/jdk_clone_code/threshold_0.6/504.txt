/** 
 * Constructs a <code>SQLException</code> object with a given <code>reason</code>, <code>SQLState</code>  and <code>vendorCode</code>. The <code>cause</code> is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method.<p>
 * @param reason a description of the exception
 * @param SQLState an XOPEN or SQL:2003 code identifying the exception
 * @param vendorCode a database vendor-specific exception code
 */
public SQLException(String reason,String SQLState,int vendorCode){
  super(reason);
  this.SQLState=SQLState;
  this.vendorCode=vendorCode;
  if (!(this instanceof SQLWarning)) {
    if (DriverManager.getLogWriter() != null) {
      DriverManager.println("SQLState(" + SQLState + ") vendor code("+ vendorCode+ ")");
      printStackTrace(DriverManager.getLogWriter());
    }
  }
}
/** 
 * Constructs a <code>SQLException</code> object with a given <code>reason</code>, <code>SQLState</code>, <code>vendorCode</code> and  <code>cause</code>. <p>
 * @param reason a description of the exception
 * @param sqlState an XOPEN or SQL:2003 code identifying the exception
 * @param vendorCode a database vendor-specific exception code
 * @param cause the underlying reason for this <code>SQLException</code>(which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating the cause is non-existent or unknown.
 * @since 1.6
 */
public SQLException(String reason,String sqlState,int vendorCode,Throwable cause){
  super(reason,cause);
  this.SQLState=sqlState;
  this.vendorCode=vendorCode;
  if (!(this instanceof SQLWarning)) {
    if (DriverManager.getLogWriter() != null) {
      DriverManager.println("SQLState(" + SQLState + ") vendor code("+ vendorCode+ ")");
      printStackTrace(DriverManager.getLogWriter());
    }
  }
}
