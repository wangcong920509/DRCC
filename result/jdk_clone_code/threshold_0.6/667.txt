/** 
 * Returns a Configuration object of the specified type. <p> A new Configuration object encapsulating the ConfigurationSpi implementation from the specified provider is returned.   The specified provider must be registered in the provider list. <p> Note that the list of registered providers may be retrieved via the  {@link Security#getProviders() Security.getProviders()} method.
 * @param type the specified Configuration type.  See the Configurationsection in the <a href= " {@docRoot}/../technotes/guides/security/StandardNames.html#Configuration"> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for a list of standard Configuration types.
 * @param params parameters for the Configuration, which may be null.
 * @param provider the provider.
 * @return the new Configuration object.
 * @exception SecurityException if the caller does not have permissionto get a Configuration instance for the specified type.
 * @exception NullPointerException if the specified type is null.
 * @exception IllegalArgumentException if the specified provideris null or empty, or if the specified parameters are not understood by the ConfigurationSpi implementation from the specified provider.
 * @exception NoSuchProviderException if the specified provider is notregistered in the security provider list.
 * @exception NoSuchAlgorithmException if the specified provider does notsupport a ConfigurationSpi implementation for the specified type.
 * @see Provider
 * @since 1.6
 */
public static Configuration getInstance(String type,Configuration.Parameters params,String provider) throws NoSuchProviderException, NoSuchAlgorithmException {
  if (provider == null || provider.length() == 0) {
    throw new IllegalArgumentException("missing provider");
  }
  checkPermission(type);
  try {
    GetInstance.Instance instance=GetInstance.getInstance("Configuration",ConfigurationSpi.class,type,params,provider);
    return new ConfigDelegate((ConfigurationSpi)instance.impl,instance.provider,type,params);
  }
 catch (  NoSuchAlgorithmException nsae) {
    return handleException(nsae);
  }
}
/** 
 * Returns a Configuration object of the specified type. <p> A new Configuration object encapsulating the ConfigurationSpi implementation from the specified Provider object is returned.  Note that the specified Provider object does not have to be registered in the provider list.
 * @param type the specified Configuration type.  See the Configurationsection in the <a href= " {@docRoot}/../technotes/guides/security/StandardNames.html#Configuration"> Java Cryptography Architecture Standard Algorithm Name Documentation</a> for a list of standard Configuration types.
 * @param params parameters for the Configuration, which may be null.
 * @param provider the Provider.
 * @return the new Configuration object.
 * @exception SecurityException if the caller does not have permissionto get a Configuration instance for the specified type.
 * @exception NullPointerException if the specified type is null.
 * @exception IllegalArgumentException if the specified Provider is null,or if the specified parameters are not understood by the ConfigurationSpi implementation from the specified Provider.
 * @exception NoSuchAlgorithmException if the specified Provider does notsupport a ConfigurationSpi implementation for the specified type.
 * @see Provider
 * @since 1.6
 */
public static Configuration getInstance(String type,Configuration.Parameters params,Provider provider) throws NoSuchAlgorithmException {
  if (provider == null) {
    throw new IllegalArgumentException("missing provider");
  }
  checkPermission(type);
  try {
    GetInstance.Instance instance=GetInstance.getInstance("Configuration",ConfigurationSpi.class,type,params,provider);
    return new ConfigDelegate((ConfigurationSpi)instance.impl,instance.provider,type,params);
  }
 catch (  NoSuchAlgorithmException nsae) {
    return handleException(nsae);
  }
}
