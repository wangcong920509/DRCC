/** 
 * Constructs a <code>SQLException</code> object with a given <code>reason</code>. The  <code>SQLState</code>  is initialized to <code>null</code> and the vender code is initialized to 0. The <code>cause</code> is not initialized, and may subsequently be initialized by a call to the {@link Throwable#initCause(java.lang.Throwable)} method.<p>
 * @param reason a description of the exception
 */
public SQLException(String reason){
  super(reason);
  this.SQLState=null;
  this.vendorCode=0;
  if (!(this instanceof SQLWarning)) {
    if (DriverManager.getLogWriter() != null) {
      printStackTrace(DriverManager.getLogWriter());
    }
  }
}
/** 
 * Constructs a <code>SQLException</code> object with a given <code>cause</code>. The <code>SQLState</code> is initialized to <code>null</code> and the vendor code is initialized to 0. The <code>reason</code>  is initialized to <code>null</code> if <code>cause==null</code> or to <code>cause.toString()</code> if <code>cause!=null</code>. <p>
 * @param cause the underlying reason for this <code>SQLException</code>(which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating the cause is non-existent or unknown.
 * @since 1.6
 */
public SQLException(Throwable cause){
  super(cause);
  if (!(this instanceof SQLWarning)) {
    if (DriverManager.getLogWriter() != null) {
      printStackTrace(DriverManager.getLogWriter());
    }
  }
}
