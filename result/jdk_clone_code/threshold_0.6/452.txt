/** 
 * Translates the sign-magnitude representation of a BigInteger into a BigInteger.  The sign is represented as an integer signum value: -1 for negative, 0 for zero, or 1 for positive.  The magnitude is a byte array in <i>big-endian</i> byte-order: the most significant byte is in the zeroth element.  A zero-length magnitude array is permissible, and will result in a BigInteger value of 0, whether signum is -1, 0 or 1.
 * @param signum signum of the number (-1 for negative, 0 for zero, 1for positive).
 * @param magnitude big-endian binary representation of the magnitude ofthe number.
 * @throws NumberFormatException {@code signum} is not one of the threelegal values (-1, 0, and 1), or  {@code signum} is 0 and{@code magnitude} contains one or more non-zero bytes.
 */
public BigInteger(int signum,byte[] magnitude){
  this.mag=stripLeadingZeroBytes(magnitude);
  if (signum < -1 || signum > 1)   throw (new NumberFormatException("Invalid signum value"));
  if (this.mag.length == 0) {
    this.signum=0;
  }
 else {
    if (signum == 0)     throw (new NumberFormatException("signum-magnitude mismatch"));
    this.signum=signum;
  }
}
/** 
 * A constructor for internal use that translates the sign-magnitude representation of a BigInteger into a BigInteger. It checks the arguments and copies the magnitude so this constructor would be safe for external use.
 */
private BigInteger(int signum,int[] magnitude){
  this.mag=stripLeadingZeroInts(magnitude);
  if (signum < -1 || signum > 1)   throw (new NumberFormatException("Invalid signum value"));
  if (this.mag.length == 0) {
    this.signum=0;
  }
 else {
    if (signum == 0)     throw (new NumberFormatException("signum-magnitude mismatch"));
    this.signum=signum;
  }
}
