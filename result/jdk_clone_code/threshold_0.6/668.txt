/** 
 * Instantiate a new <code>LoginContext</code> object with a name and a <code>CallbackHandler</code> object. <p>
 * @param name the name used as the index into the<code>Configuration</code>. <p>
 * @param callbackHandler the <code>CallbackHandler</code> object used byLoginModules to communicate with the user.
 * @exception LoginException if the caller-specified <code>name</code>does not appear in the <code>Configuration</code> and there is no <code>Configuration</code> entry for "<i>other</i>", or if the caller-specified <code>callbackHandler</code> is <code>null</code>. <p>
 * @exception SecurityException if a SecurityManager is set andthe caller does not have AuthPermission("createLoginContext.<i>name</i>"), or if a configuration entry for <i>name</i> does not exist and the caller does not additionally have AuthPermission("createLoginContext.other")
 */
public LoginContext(String name,CallbackHandler callbackHandler) throws LoginException {
  init(name);
  if (callbackHandler == null)   throw new LoginException(ResourcesMgr.getString("invalid.null.CallbackHandler.provided"));
  this.callbackHandler=new SecureCallbackHandler(java.security.AccessController.getContext(),callbackHandler);
}
/** 
 * Instantiate a new <code>LoginContext</code> object with a name, a <code>Subject</code> to be authenticated, and a <code>CallbackHandler</code> object. <p>
 * @param name the name used as the index into the<code>Configuration</code>. <p>
 * @param subject the <code>Subject</code> to authenticate. <p>
 * @param callbackHandler the <code>CallbackHandler</code> object used byLoginModules to communicate with the user.
 * @exception LoginException if the caller-specified <code>name</code>does not appear in the <code>Configuration</code> and there is no <code>Configuration</code> entry for "<i>other</i>", or if the caller-specified <code>subject</code> is <code>null</code>, or if the caller-specified <code>callbackHandler</code> is <code>null</code>. <p>
 * @exception SecurityException if a SecurityManager is set andthe caller does not have AuthPermission("createLoginContext.<i>name</i>"), or if a configuration entry for <i>name</i> does not exist and the caller does not additionally have AuthPermission("createLoginContext.other")
 */
public LoginContext(String name,Subject subject,CallbackHandler callbackHandler) throws LoginException {
  this(name,subject);
  if (callbackHandler == null)   throw new LoginException(ResourcesMgr.getString("invalid.null.CallbackHandler.provided"));
  this.callbackHandler=new SecureCallbackHandler(java.security.AccessController.getContext(),callbackHandler);
}
