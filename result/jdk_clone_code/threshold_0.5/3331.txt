/** 
 * Resets the <code>Builder</code> to match the provided <code>locale</code>.  Existing state is discarded. <p>All fields of the locale must be well-formed, see  {@link Locale}. <p>Locales with any ill-formed fields cause <code>IllformedLocaleException</code> to be thrown, except for the following three cases which are accepted for compatibility reasons:<ul> <li>Locale("ja", "JP", "JP") is treated as "ja-JP-u-ca-japanese" <li>Locale("th", "TH", "TH") is treated as "th-TH-u-nu-thai" <li>Locale("no", "NO", "NY") is treated as "nn-NO"</ul>
 * @param locale the locale
 * @return This builder.
 * @throws IllformedLocaleException if <code>locale</code> hasany ill-formed fields.
 * @throws NullPointerException if <code>locale</code> is null.
 */
public Builder setLocale(Locale locale){
  try {
    localeBuilder.setLocale(locale.baseLocale,locale.localeExtensions);
  }
 catch (  LocaleSyntaxException e) {
    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());
  }
  return this;
}
/** 
 * Sets the variant.  If variant is null or the empty string, the variant in this <code>Builder</code> is removed.  Otherwise, it must consist of one or more <a href="./Locale.html#def_variant">well-formed</a> subtags, or an exception is thrown. <p><b>Note:</b> This method checks if <code>variant</code> satisfies the IETF BCP 47 variant subtag's syntax requirements, and normalizes the value to lowercase letters.  However, the <code>Locale</code> class does not impose any syntactic restriction on variant, and the variant value in <code>Locale</code> is case sensitive.  To set such a variant, use a Locale constructor.
 * @param variant the variant
 * @return This builder.
 * @throws IllformedLocaleException if <code>variant</code> is ill-formed
 */
public Builder setVariant(String variant){
  try {
    localeBuilder.setVariant(variant);
  }
 catch (  LocaleSyntaxException e) {
    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());
  }
  return this;
}
