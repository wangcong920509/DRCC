/** 
 * Removes the first occurrence of <code>item</code> from the <code>Choice</code> menu.  If the item being removed is the currently selected item, then the first item in the choice becomes the selected item.  Otherwise, the currently selected item remains selected (and the selected index is updated accordingly).
 * @param item  the item to remove from this <code>Choice</code> menu
 * @exception IllegalArgumentException  if the item doesn'texist in the choice menu
 * @since      JDK1.1
 */
public void remove(String item){
synchronized (this) {
    int index=pItems.indexOf(item);
    if (index < 0) {
      throw new IllegalArgumentException("item " + item + " not found in choice");
    }
 else {
      removeNoInvalidate(index);
    }
  }
  invalidateIfValid();
}
/** 
 * Removes an item from the choice menu at the specified position.  If the item being removed is the currently selected item, then the first item in the choice becomes the selected item.  Otherwise, the currently selected item remains selected (and the selected index is updated accordingly).
 * @param position the position of the item
 * @throws IndexOutOfBoundsException if the specifiedposition is out of bounds
 * @since      JDK1.1
 */
public void remove(int position){
synchronized (this) {
    removeNoInvalidate(position);
  }
  invalidateIfValid();
}
