/** 
 * Sets the variant.  If variant is null or the empty string, the variant in this <code>Builder</code> is removed.  Otherwise, it must consist of one or more <a href="./Locale.html#def_variant">well-formed</a> subtags, or an exception is thrown. <p><b>Note:</b> This method checks if <code>variant</code> satisfies the IETF BCP 47 variant subtag's syntax requirements, and normalizes the value to lowercase letters.  However, the <code>Locale</code> class does not impose any syntactic restriction on variant, and the variant value in <code>Locale</code> is case sensitive.  To set such a variant, use a Locale constructor.
 * @param variant the variant
 * @return This builder.
 * @throws IllformedLocaleException if <code>variant</code> is ill-formed
 */
public Builder setVariant(String variant){
  try {
    localeBuilder.setVariant(variant);
  }
 catch (  LocaleSyntaxException e) {
    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());
  }
  return this;
}
/** 
 * Sets the extension for the given key. If the value is null or the empty string, the extension is removed.  Otherwise, the extension must be <a href="./Locale.html#def_extensions">well-formed</a> or an exception is thrown. <p><b>Note:</b> The key  {@link Locale#UNICODE_LOCALE_EXTENSION UNICODE_LOCALE_EXTENSION} ('u') is used for the Unicode locale extension.Setting a value for this key replaces any existing Unicode locale key/type pairs with those defined in the extension. <p><b>Note:</b> The key  {@link Locale#PRIVATE_USE_EXTENSION PRIVATE_USE_EXTENSION} ('x') is used for the private use code. To bewell-formed, the value for this key needs only to have subtags of one to eight alphanumeric characters, not two to eight as in the general case.
 * @param key the extension key
 * @param value the extension value
 * @return This builder.
 * @throws IllformedLocaleException if <code>key</code> is illegalor <code>value</code> is ill-formed
 * @see #setUnicodeLocaleKeyword(String,String)
 */
public Builder setExtension(char key,String value){
  try {
    localeBuilder.setExtension(key,value);
  }
 catch (  LocaleSyntaxException e) {
    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());
  }
  return this;
}
