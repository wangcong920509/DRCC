/** 
 * Creates a  {@code FutureTask} that will, upon running, execute thegiven  {@code Callable}.
 * @param callable the callable task
 * @throws NullPointerException if the callable is null
 */
public FutureTask(Callable<V> callable){
  if (callable == null)   throw new NullPointerException();
  this.callable=callable;
  this.state=NEW;
}
/** 
 * Creates a  {@code FutureTask} that will, upon running, execute thegiven  {@code Runnable}, and arrange that  {@code get} will return thegiven result on successful completion.
 * @param runnable the runnable task
 * @param result the result to return on successful completion. Ifyou don't need a particular result, consider using constructions of the form: {@code Future<?> f = new FutureTask<Void>(runnable, null)}
 * @throws NullPointerException if the runnable is null
 */
public FutureTask(Runnable runnable,V result){
  this.callable=Executors.callable(runnable,result);
  this.state=NEW;
}
