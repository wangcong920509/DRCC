/** 
 * Sets this process builder's working directory. Subprocesses subsequently started by this object's  {@link #start()} method will use this as their working directory.The argument may be  {@code null} -- this means to use theworking directory of the current Java process, usually the directory named by the system property  {@code user.dir}, as the working directory of the child process.
 * @param directory the new working directory
 * @return this process builder
 */
public ProcessBuilder directory(File directory){
  this.directory=directory;
  return this;
}
/** 
 * Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process. <p>This is a convenience method.  An invocation of the form <pre>  {@code pb.inheritIO()}</pre> behaves in exactly the same way as the invocation <pre>  {@code pb.redirectInput(Redirect.INHERIT) .redirectOutput(Redirect.INHERIT) .redirectError(Redirect.INHERIT)}</pre> This gives behavior equivalent to most operating system command interpreters, or the standard C library function {@code system()}.
 * @return this process builder
 * @since  1.7
 */
public ProcessBuilder inheritIO(){
  Arrays.fill(redirects(),Redirect.INHERIT);
  return this;
}
