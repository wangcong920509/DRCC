/** 
 * Constructs a new ColorConvertOp which will convert from a source color space to a destination color space. The RenderingHints argument may be null. This Op can be used only with BufferedImages, and will convert directly from the ColorSpace of the source image to that of the destination.  The destination argument of the filter method cannot be specified as null.
 * @param hints the <code>RenderingHints</code> object used to controlthe color conversion, or <code>null</code>
 */
public ColorConvertOp(RenderingHints hints){
  profileList=new ICC_Profile[0];
  this.hints=hints;
}
/** 
 * Constructs a new ColorConvertOp from a ColorSpace object. The RenderingHints argument may be null.  This Op can be used only with BufferedImages, and is primarily useful when the  {@link #filter(BufferedImage,BufferedImage) filter}method is invoked with a destination argument of null. In that case, the ColorSpace defines the destination color space for the destination created by the filter method.  Otherwise, the ColorSpace defines an intermediate space to which the source is converted before being converted to the destination space.
 * @param cspace defines the destination <code>ColorSpace</code> or anintermediate <code>ColorSpace</code>
 * @param hints the <code>RenderingHints</code> object used to controlthe color conversion, or <code>null</code>
 * @throws NullPointerException if cspace is null
 */
public ColorConvertOp(ColorSpace cspace,RenderingHints hints){
  if (cspace == null) {
    throw new NullPointerException("ColorSpace cannot be null");
  }
  if (cspace instanceof ICC_ColorSpace) {
    profileList=new ICC_Profile[1];
    profileList[0]=((ICC_ColorSpace)cspace).getProfile();
  }
 else {
    CSList=new ColorSpace[1];
    CSList[0]=cspace;
  }
  this.hints=hints;
}
