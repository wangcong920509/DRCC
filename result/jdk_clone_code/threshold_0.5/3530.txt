/** 
 * Create an instance of a <code>Subject</code> with an empty <code>Set</code> of Principals and empty Sets of public and private credentials. <p> The newly constructed Sets check whether this <code>Subject</code> has been set read-only before permitting subsequent modifications. The newly created Sets also prevent illegal modifications by ensuring that callers have sufficient permissions. <p> To modify the Principals Set, the caller must have <code>AuthPermission("modifyPrincipals")</code>. To modify the public credential Set, the caller must have <code>AuthPermission("modifyPublicCredentials")</code>. To modify the private credential Set, the caller must have <code>AuthPermission("modifyPrivateCredentials")</code>.
 */
public Subject(){
  this.principals=Collections.synchronizedSet(new SecureSet<Principal>(this,PRINCIPAL_SET));
  this.pubCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PUB_CREDENTIAL_SET));
  this.privCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PRIV_CREDENTIAL_SET));
}
/** 
 * Reads this object from a stream (i.e., deserializes it)
 */
private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {
  s.defaultReadObject();
  this.pubCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PUB_CREDENTIAL_SET));
  this.privCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PRIV_CREDENTIAL_SET));
}
