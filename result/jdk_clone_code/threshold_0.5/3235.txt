/** 
 * Sets the region.  If region is null or the empty string, the region in this <code>Builder</code> is removed.  Otherwise, the region must be <a href="./Locale.html#def_region">well-formed</a> or an exception is thrown. <p>The typical region value is a two-letter ISO 3166 code or a three-digit UN M.49 area code. <p>The country value in the <code>Locale</code> created by the <code>Builder</code> is always normalized to upper case.
 * @param region the region
 * @return This builder.
 * @throws IllformedLocaleException if <code>region</code> is ill-formed
 */
public Builder setRegion(String region){
  try {
    localeBuilder.setRegion(region);
  }
 catch (  LocaleSyntaxException e) {
    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());
  }
  return this;
}
/** 
 * Sets the Unicode locale keyword type for the given key.  If the type is null, the Unicode keyword is removed.  Otherwise, the key must be non-null and both key and type must be <a href="./Locale.html#def_locale_extension">well-formed</a> or an exception is thrown. <p>Keys and types are converted to lower case. <p><b>Note</b>:Setting the 'u' extension via  {@link #setExtension}replaces all Unicode locale keywords with those defined in the extension.
 * @param key the Unicode locale key
 * @param type the Unicode locale type
 * @return This builder.
 * @throws IllformedLocaleException if <code>key</code> or <code>type</code>is ill-formed
 * @throws NullPointerException if <code>key</code> is null
 * @see #setExtension(char,String)
 */
public Builder setUnicodeLocaleKeyword(String key,String type){
  try {
    localeBuilder.setUnicodeLocaleKeyword(key,type);
  }
 catch (  LocaleSyntaxException e) {
    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());
  }
  return this;
}
