/** 
 * <p>Locates an external subset for documents which do not explicitly provide one. If no external subset is provided, this method should return <code>null</code>.</p>
 * @param grammarDescription a description of the DTD
 * @throws XNIException Thrown on general error.
 * @throws IOException  Thrown if resolved entity stream cannot beopened or some other i/o error occurs.
 */
public XMLInputSource getExternalSubset(XMLDTDDescription grammarDescription) throws XNIException, IOException {
  if (fEntityResolver != null) {
    String name=grammarDescription.getRootName();
    String baseURI=grammarDescription.getBaseSystemId();
    try {
      InputSource inputSource=fEntityResolver.getExternalSubset(name,baseURI);
      return (inputSource != null) ? createXMLInputSource(inputSource,baseURI) : null;
    }
 catch (    SAXException e) {
      Exception ex=e.getException();
      if (ex == null) {
        ex=e;
      }
      throw new XNIException(ex);
    }
  }
  return null;
}
/** 
 * Resolves an external parsed entity. If the entity cannot be resolved, this method should return null.
 * @param resourceIdentifier contains the physical co-ordinates of the resource to be resolved
 * @throws XNIException Thrown on general error.
 * @throws IOException  Thrown if resolved entity stream cannot beopened or some other i/o error occurs.
 */
public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException {
  if (fEntityResolver != null) {
    String pubId=resourceIdentifier.getPublicId();
    String sysId=resourceIdentifier.getLiteralSystemId();
    String baseURI=resourceIdentifier.getBaseSystemId();
    String name=null;
    if (resourceIdentifier instanceof XMLDTDDescription) {
      name="[dtd]";
    }
 else     if (resourceIdentifier instanceof XMLEntityDescription) {
      name=((XMLEntityDescription)resourceIdentifier).getEntityName();
    }
    if (pubId == null && sysId == null) {
      return null;
    }
    try {
      InputSource inputSource=fEntityResolver.resolveEntity(name,pubId,baseURI,sysId);
      return (inputSource != null) ? createXMLInputSource(inputSource,baseURI) : null;
    }
 catch (    SAXException e) {
      Exception ex=e.getException();
      if (ex == null) {
        ex=e;
      }
      throw new XNIException(ex);
    }
  }
  return null;
}
