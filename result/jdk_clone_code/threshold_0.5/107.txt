/** 
 * Searches for a MIB variable given its logical name and returns an <CODE>SnmpOidRecord</CODE> object containing information on the variable.
 * @param name The name of the MIB variable.
 * @return The <CODE>SnmpOidRecord</CODE> object containing information on the variable.
 * @exception SnmpStatusException The specified name does not exist in this <CODE>SnmpOidDatabase</CODE>
 */
public SnmpOidRecord resolveVarName(String name) throws SnmpStatusException {
  for (int i=0; i < tables.size(); i++) {
    try {
      return (tables.elementAt(i).resolveVarName(name));
    }
 catch (    SnmpStatusException e) {
      if (i == tables.size() - 1) {
        throw new SnmpStatusException(e.getMessage());
      }
    }
  }
  return null;
}
/** 
 * Searches for a MIB variable given its OID and returns an <CODE>SnmpOidRecord</CODE> object containing information on the variable.
 * @param oid The OID of the MIB variable.
 * @return The <CODE>SnmpOidRecord</CODE> object containing information on the variable.
 * @exception SnmpStatusException The specified oid does not exist in this <CODE>SnmpOidDatabase</CODE>.
 */
public SnmpOidRecord resolveVarOid(String oid) throws SnmpStatusException {
  for (int i=0; i < tables.size(); i++) {
    try {
      return tables.elementAt(i).resolveVarOid(oid);
    }
 catch (    SnmpStatusException e) {
      if (i == tables.size() - 1) {
        throw new SnmpStatusException(e.getMessage());
      }
    }
  }
  return null;
}
