/** 
 * Returns the codebase, if any, for the given class.
 * @param clz the class to get a codebase for.
 * @return a space-separated list of URLs, or null.
 */
public static String getCodebase(java.lang.Class clz){
  if (utilDelegate != null) {
    return utilDelegate.getCodebase(clz);
  }
  return null;
}
/** 
 * Returns a class instance for the specified class. <P>The spec for this method is the "Java to IDL language mapping", ptc/00-01-06. <P>In Java SE Platform, this method works as follows: <UL><LI>Find the first non-null <tt>ClassLoader</tt> on the call stack and attempt to load the class using this <tt>ClassLoader</tt>. <LI>If the first step fails, and if <tt>remoteCodebase</tt> is non-null and <tt>useCodebaseOnly</tt> is false, then call <tt>java.rmi.server.RMIClassLoader.loadClass(remoteCodebase, className)</tt>. <LI>If <tt>remoteCodebase</tt> is null or <tt>useCodebaseOnly</tt> is true, then call <tt>java.rmi.server.RMIClassLoader.loadClass(className)</tt>. <LI>If a class was not successfully loaded by step 1, 2, or 3, and <tt>loader</tt> is non-null, then call <tt>loader.loadClass(className)</tt>. <LI>If a class was successfully loaded by step 1, 2, 3, or 4, then return the loaded class, else throw <tt>ClassNotFoundException</tt>.
 * @param className the name of the class.
 * @param remoteCodebase a space-separated list of URLs at whichthe class might be found. May be null.
 * @param loader a <tt>ClassLoader</tt> that may be used toload the class if all other methods fail.
 * @return the <code>Class</code> object representing the loaded class.
 * @exception ClassNotFoundException if class cannot be loaded.
 */
public static Class loadClass(String className,String remoteCodebase,ClassLoader loader) throws ClassNotFoundException {
  if (utilDelegate != null) {
    return utilDelegate.loadClass(className,remoteCodebase,loader);
  }
  return null;
}
