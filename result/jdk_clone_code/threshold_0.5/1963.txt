/** 
 * Construct a <code>DragSourceDropEvent</code> for a drop, given the <code>DragSourceContext</code>, the drop action, and a <code>boolean</code> indicating if the drop was successful. The coordinates for this <code>DragSourceDropEvent</code> are not specified, so <code>getLocation</code> will return <code>null</code> for this event. <p> The argument <code>action</code> should be one of <code>DnDConstants</code> that represents a single action. This constructor does not throw any exception for invalid <code>action</code>.
 * @param dsc the <code>DragSourceContext</code>associated with this <code>DragSourceDropEvent</code>
 * @param action the drop action
 * @param success a boolean indicating if the drop was successful
 * @throws <code>IllegalArgumentException</code> if <code>dsc</code> is <code>null</code>.
 * @see DragSourceEvent#getLocation
 */
public DragSourceDropEvent(DragSourceContext dsc,int action,boolean success){
  super(dsc);
  dropSuccess=success;
  dropAction=action;
}
/** 
 * Construct a <code>DragSourceDropEvent</code> for a drop, given the <code>DragSourceContext</code>, the drop action, a <code>boolean</code> indicating if the drop was successful, and coordinates. <p> The argument <code>action</code> should be one of <code>DnDConstants</code> that represents a single action. This constructor does not throw any exception for invalid <code>action</code>.
 * @param dsc the <code>DragSourceContext</code>associated with this <code>DragSourceDropEvent</code>
 * @param action the drop action
 * @param success a boolean indicating if the drop was successful
 * @param x   the horizontal coordinate for the cursor location
 * @param y   the vertical coordinate for the cursor location
 * @throws <code>IllegalArgumentException</code> if <code>dsc</code> is <code>null</code>.
 * @since 1.4
 */
public DragSourceDropEvent(DragSourceContext dsc,int action,boolean success,int x,int y){
  super(dsc,x,y);
  dropSuccess=success;
  dropAction=action;
}
