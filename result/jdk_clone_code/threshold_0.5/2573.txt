/** 
 * Constructs a new throwable with the specified detail message and cause.  <p>Note that the detail message associated with {@code cause} is <i>not</i> automatically incorporated inthis throwable's detail message. <p>The  {@link #fillInStackTrace()} method is called to initializethe stack trace data in the newly created throwable.
 * @param message the detail message (which is saved for later retrievalby the  {@link #getMessage()} method).
 * @param cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A {@code null} value ispermitted, and indicates that the cause is nonexistent or unknown.)
 * @since  1.4
 */
public Throwable(String message,Throwable cause){
  fillInStackTrace();
  detailMessage=message;
  this.cause=cause;
}
/** 
 * Constructs a new throwable with the specified cause and a detail message of  {@code (cause==null ? null : cause.toString())} (whichtypically contains the class and detail message of  {@code cause}). This constructor is useful for throwables that are little more than wrappers for other throwables (for example,  {@link java.security.PrivilegedActionException}). <p>The  {@link #fillInStackTrace()} method is called to initializethe stack trace data in the newly created throwable.
 * @param cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A {@code null} value ispermitted, and indicates that the cause is nonexistent or unknown.)
 * @since  1.4
 */
public Throwable(Throwable cause){
  fillInStackTrace();
  detailMessage=(cause == null ? null : cause.toString());
  this.cause=cause;
}
