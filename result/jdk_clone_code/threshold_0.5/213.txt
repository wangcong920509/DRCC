/** 
 * Returns the default state for a feature, or null if this component does not want to report a default value for this feature.
 * @param featureId The feature identifier.
 * @since Xerces 2.2.0
 */
public Boolean getFeatureDefault(String featureId){
  for (int i=0; i < RECOGNIZED_FEATURES.length; i++) {
    if (RECOGNIZED_FEATURES[i].equals(featureId)) {
      return FEATURE_DEFAULTS[i];
    }
  }
  return null;
}
/** 
 * Return the expanded system identifier for the current document event. <p> The return value is the expanded system identifier of the document entity or of the external parsed entity in which the markup triggering the event appears. <p> If the system identifier is a URL, the parser must resolve it fully before passing it to the application.
 * @return A string containing the expanded system identifier, or nullif none is available.
 */
public String getExpandedSystemId(){
  if (fCurrentEntity != null) {
    if (fCurrentEntity.entityLocation != null && fCurrentEntity.entityLocation.getExpandedSystemId() != null) {
      return fCurrentEntity.entityLocation.getExpandedSystemId();
    }
 else {
      int size=fEntityStack.size();
      for (int i=size - 1; i >= 0; i--) {
        Entity.ScannedEntity externalEntity=(Entity.ScannedEntity)fEntityStack.elementAt(i);
        if (externalEntity.entityLocation != null && externalEntity.entityLocation.getExpandedSystemId() != null) {
          return externalEntity.entityLocation.getExpandedSystemId();
        }
      }
    }
  }
  return null;
}
