/** 
 * Assigns the specified short value to each element of the specified range of the specified array of shorts.  The range to be filled extends from index <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the range to be filled is empty.)
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to befilled with the specified value
 * @param toIndex the index of the last element (exclusive) to befilled with the specified value
 * @param val the value to be stored in all elements of the array
 * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or<tt>toIndex &gt; a.length</tt>
 */
public static void fill(short[] a,int fromIndex,int toIndex,short val){
  rangeCheck(a.length,fromIndex,toIndex);
  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;
}
/** 
 * Assigns the specified Object reference to each element of the specified range of the specified array of Objects.  The range to be filled extends from index <tt>fromIndex</tt>, inclusive, to index <tt>toIndex</tt>, exclusive.  (If <tt>fromIndex==toIndex</tt>, the range to be filled is empty.)
 * @param a the array to be filled
 * @param fromIndex the index of the first element (inclusive) to befilled with the specified value
 * @param toIndex the index of the last element (exclusive) to befilled with the specified value
 * @param val the value to be stored in all elements of the array
 * @throws IllegalArgumentException if <tt>fromIndex &gt; toIndex</tt>
 * @throws ArrayIndexOutOfBoundsException if <tt>fromIndex &lt; 0</tt> or<tt>toIndex &gt; a.length</tt>
 * @throws ArrayStoreException if the specified value is not of aruntime type that can be stored in the specified array
 */
public static void fill(Object[] a,int fromIndex,int toIndex,Object val){
  rangeCheck(a.length,fromIndex,toIndex);
  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;
}
