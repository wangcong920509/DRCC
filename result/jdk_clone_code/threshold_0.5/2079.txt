/** 
 * Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process. <p>This is a convenience method.  An invocation of the form <pre>  {@code pb.inheritIO()}</pre> behaves in exactly the same way as the invocation <pre>  {@code pb.redirectInput(Redirect.INHERIT) .redirectOutput(Redirect.INHERIT) .redirectError(Redirect.INHERIT)}</pre> This gives behavior equivalent to most operating system command interpreters, or the standard C library function {@code system()}.
 * @return this process builder
 * @since  1.7
 */
public ProcessBuilder inheritIO(){
  Arrays.fill(redirects(),Redirect.INHERIT);
  return this;
}
/** 
 * Sets this process builder's  {@code redirectErrorStream} property.<p>If this property is  {@code true}, then any error output generated by subprocesses subsequently started by this object's {@link #start()} method will be merged with the standardoutput, so that both can be read using the {@link Process#getInputStream()} method.  This makes it easierto correlate error messages with the corresponding output. The initial value is  {@code false}.
 * @param redirectErrorStream the new property value
 * @return this process builder
 */
public ProcessBuilder redirectErrorStream(boolean redirectErrorStream){
  this.redirectErrorStream=redirectErrorStream;
  return this;
}
