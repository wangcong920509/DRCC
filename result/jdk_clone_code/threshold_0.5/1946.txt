/** 
 * Determines whether this component is showing on screen. This means that the component must be visible, and it must be in a container that is visible and showing. <p> <strong>Note:</strong> sometimes there is no way to detect whether the {@code Component} is actually visible to the user.  This can happen when:<ul> <li>the component has been added to a visible  {@code ScrollPane} butthe  {@code Component} is not currently in the scroll pane's view port.<li>the  {@code Component} is obscured by another {@code Component} or{@code Container}. </ul>
 * @return <code>true</code> if the component is showing,<code>false</code> otherwise
 * @see #setVisible
 * @since JDK1.0
 */
public boolean isShowing(){
  if (visible && (peer != null)) {
    Container parent=this.parent;
    return (parent == null) || parent.isShowing();
  }
  return false;
}
/** 
 * @deprecated As of JDK version 1.1replaced by processEvent(AWTEvent).
 */
@Deprecated public boolean handleEvent(Event evt){
switch (evt.id) {
case Event.MOUSE_ENTER:
    return mouseEnter(evt,evt.x,evt.y);
case Event.MOUSE_EXIT:
  return mouseExit(evt,evt.x,evt.y);
case Event.MOUSE_MOVE:
return mouseMove(evt,evt.x,evt.y);
case Event.MOUSE_DOWN:
return mouseDown(evt,evt.x,evt.y);
case Event.MOUSE_DRAG:
return mouseDrag(evt,evt.x,evt.y);
case Event.MOUSE_UP:
return mouseUp(evt,evt.x,evt.y);
case Event.KEY_PRESS:
case Event.KEY_ACTION:
return keyDown(evt,evt.key);
case Event.KEY_RELEASE:
case Event.KEY_ACTION_RELEASE:
return keyUp(evt,evt.key);
case Event.ACTION_EVENT:
return action(evt,evt.arg);
case Event.GOT_FOCUS:
return gotFocus(evt,evt.arg);
case Event.LOST_FOCUS:
return lostFocus(evt,evt.arg);
}
return false;
}
