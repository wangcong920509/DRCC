/** 
 * Sets the designated parameter to the given array of bytes. The driver converts this to an SQL <code>VARBINARY</code> or <code>LONGVARBINARY</code> value (depending on the argument's size relative to the driver's limits on <code>VARBINARY</code> values) when it sends it to the database. <P> The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this <code>RowSet</code> object's command when the method <code>execute</code> is called. Methods such as <code>execute</code> and <code>populate</code> must be provided in any class that extends this class and implements one or more of the standard JSR-114 <code>RowSet</code> interfaces. <p> NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method as it is undefined in this class.
 * @param parameterIndex the ordinal number of the placeholder parameterin this <code>RowSet</code> object's command that is to be set. The first parameter is 1, the second is 2, and so on; must be <code>1</code> or greater
 * @param x the parameter value
 * @throws SQLException if an error occurs or theparameter index is out of bounds
 * @see #getParams
 */
public void setBytes(int parameterIndex,byte x[]) throws SQLException {
  checkParamIndex(parameterIndex);
  if (params == null) {
    throw new SQLException("Set initParams() before setBytes");
  }
  params.put(Integer.valueOf(parameterIndex - 1),x);
}
/** 
 * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value. The driver converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the database. <P> The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this <code>RowSet</code> object's command when the method <code>execute</code> is called. Methods such as <code>execute</code> and <code>populate</code> must be provided in any class that extends this class and implements one or more of the standard JSR-114 <code>RowSet</code> interfaces. <P> NOTE: <code>JdbcRowSet</code> does not require the <code>populate</code> method as it is undefined in this class. <P> Calls made to the method <code>getParams</code> after this version of <code>setTimestamp</code> has been called will return an array with the value for parameter placeholder number <i>parameterIndex</i> being the <code>Timestamp</code> object that was supplied as the second parameter to this method. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number <i>parameterIndex</i> is <i>parameterIndex</i> -1.
 * @param parameterIndex the ordinal number of the placeholder parameterin this <code>RowSet</code> object's command that is to be set. The first parameter is 1, the second is 2, and so on; must be <code>1</code> or greater
 * @param x a <code>java.sql.Timestamp</code> object
 * @throws SQLException if an error occurs or theparameter index is out of bounds
 * @see #getParams
 */
public void setTimestamp(int parameterIndex,java.sql.Timestamp x) throws SQLException {
  checkParamIndex(parameterIndex);
  if (params == null) {
    throw new SQLException("Set initParams() before setTimestamp");
  }
  params.put(Integer.valueOf(parameterIndex - 1),x);
}
