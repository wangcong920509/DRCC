/** 
 * Returns <code>true</code> if it is possible to replace the stream metadata already present in the output. <p> The default implementation throws an <code>IllegalStateException</code> if the output is <code>null</code>, and otherwise returns <code>false</code>.
 * @return <code>true</code> if replacement of stream metadata isallowed.
 * @exception IllegalStateException if the output has notbeen set.
 * @exception IOException if an I/O error occurs during the query.
 */
public boolean canReplaceStreamMetadata() throws IOException {
  if (getOutput() == null) {
    throw new IllegalStateException("getOutput() == null!");
  }
  return false;
}
/** 
 * Returns <code>true</code> if the writer supports the insertion of a new, empty image at the given index.  The pixel values of the image are undefined, and may be specified in pieces using the <code>replacePixels</code> methods.  Existing images with indices greater than or equal to the insertion index will have their indices increased by 1.  A value for <code>imageIndex</code> of <code>-1</code> may be used to signify an index one larger than the current largest index. <p> A writer that does not support insertion of empty images may return <code>false</code> without performing bounds checking on the index. <p> The default implementation throws an <code>IllegalStateException</code> if the output is <code>null</code>, and otherwise returns <code>false</code> without checking the value of <code>imageIndex</code>.
 * @param imageIndex the index at which the image is to beinserted.
 * @return <code>true</code> if an empty image may be inserted atthe given index.
 * @exception IllegalStateException if the output has not beenset.
 * @exception IndexOutOfBoundsException if the writer supportsempty image insertion in general, but <code>imageIndex</code> is less than -1 or greater than the largest available index.
 * @exception IOException if an I/O error occurs during thequery.
 */
public boolean canInsertEmpty(int imageIndex) throws IOException {
  if (getOutput() == null) {
    throw new IllegalStateException("getOutput() == null!");
  }
  return false;
}
