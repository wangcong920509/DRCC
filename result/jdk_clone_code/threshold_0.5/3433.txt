/** 
 * Constructs a ModelMBeanConstructorInfo object.  The  {@link Descriptor} of the constructed object will include fieldscontributed by any annotations on the  {@code Constructor}object that contain the  {@link DescriptorKey}meta-annotation.
 * @param description A human readable description of the constructor.
 * @param constructorMethod The java.lang.reflect.Constructor objectdescribing the ModelMBean constructor.
 * @param descriptor An instance of Descriptor containing theappropriate metadata for this instance of the ModelMBeanConstructorInfo.  If it is null, then a default descriptor will be created. If the descriptor does not contain the field "displayName" this field is added in the descriptor with its default value.
 * @exception RuntimeOperationsException Wraps anIllegalArgumentException. The descriptor is invalid, or descriptor field "name" is not equal to name parameter, or descriptor field "descriptorType" is not equal to "operation" or descriptor field "role" is present but not equal to "constructor".
 */
public ModelMBeanConstructorInfo(String description,Constructor<?> constructorMethod,Descriptor descriptor){
  super(description,constructorMethod);
  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {
    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanConstructorInfo.class.getName(),"ModelMBeanConstructorInfo(" + "String,Constructor,Descriptor)","Entry");
  }
  consDescriptor=validDescriptor(descriptor);
}
/** 
 * Constructs a ModelMBeanConstructorInfo object.
 * @param name The name of the constructor.
 * @param description A human readable description of the constructor.
 * @param signature MBeanParameterInfo objects describing the parameters(arguments) of the constructor.
 * @param descriptor An instance of Descriptor containing the appropriate metadatafor this instance of the MBeanConstructorInfo. If it is null then a default descriptor will be created. If the descriptor does not contain the field "displayName" this field is added in the descriptor with its default value.
 * @exception RuntimeOperationsException Wraps anIllegalArgumentException. The descriptor is invalid, or descriptor field "name" is not equal to name parameter, or descriptor field "descriptorType" is not equal to "operation" or descriptor field "role" is present but not equal to "constructor".
 */
public ModelMBeanConstructorInfo(String name,String description,MBeanParameterInfo[] signature,Descriptor descriptor){
  super(name,description,signature);
  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {
    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanConstructorInfo.class.getName(),"ModelMBeanConstructorInfo(" + "String,String,MBeanParameterInfo[],Descriptor)","Entry");
  }
  consDescriptor=validDescriptor(descriptor);
}
