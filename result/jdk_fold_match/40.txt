jdk_src\com\sun\org\apache\bcel\internal\classfile\Utility.java
/** 
 * @param signature    Method signature
 * @param chopit Shorten class names ?
 * @return return type of method
 * @throws ClassFormatException
 */
public static final String methodSignatureReturnType(String signature,boolean chopit) throws ClassFormatException {
  int index;
  String type;
  try {
    index=signature.lastIndexOf(')') + 1;
    type=signatureToString(signature.substring(index),chopit);
  }
 catch (  StringIndexOutOfBoundsException e) {
    throw new ClassFormatException("Invalid method signature: " + signature);
  }
  return type;
}
/** 
 * A return type signature represents the return value from a method. It is a series of bytes in the following grammar: <return_signature> ::= <field_type> | V The character V indicates that the method returns no value. Otherwise, the signature indicates the type of the return value. An argument signature represents an argument passed to a method: <argument_signature> ::= <field_type> A method signature represents the arguments that the method expects, and the value that it returns. <method_signature> ::= (<arguments_signature>) <return_signature> <arguments_signature>::= <argument_signature> This method converts such a string into a Java type declaration like `void _main(String[])' and throws a `ClassFormatException' when the parsed type is invalid.
 * @param signature    Method signature
 * @param name         Method name
 * @param access       Method access rights
 * @return Java type declaration
 * @throws ClassFormatException
 */
public static final String methodSignatureToString(String signature,String name,String access,boolean chopit,LocalVariableTable vars) throws ClassFormatException {
  StringBuffer buf=new StringBuffer("(");
  String type;
  int index;
  int var_index=(access.indexOf("static") >= 0) ? 0 : 1;
  try {
    if (signature.charAt(0) != '(')     throw new ClassFormatException("Invalid method signature: " + signature);
    index=1;
    while (signature.charAt(index) != ')') {
      String param_type=signatureToString(signature.substring(index),chopit);
      buf.append(param_type);
      if (vars != null) {
        LocalVariable l=vars.getLocalVariable(var_index);
        if (l != null)         buf.append(" " + l.getName());
      }
 else       buf.append(" arg" + var_index);
      if ("double".equals(param_type) || "long".equals(param_type))       var_index+=2;
 else       var_index++;
      buf.append(", ");
      index+=consumed_chars;
    }
    index++;
    type=signatureToString(signature.substring(index),chopit);
  }
 catch (  StringIndexOutOfBoundsException e) {
    throw new ClassFormatException("Invalid method signature: " + signature);
  }
  if (buf.length() > 1)   buf.setLength(buf.length() - 2);
  buf.append(")");
  return access + ((access.length() > 0) ? " " : "") + type+ " "+ name+ buf.toString();
}
