jdk_src\javax\swing\text\Utilities.java
static final int drawTabbedText(View view,Segment s,int x,int y,Graphics g,TabExpander e,int startOffset,int[] justificationData){
  JComponent component=getJComponent(view);
  FontMetrics metrics=SwingUtilities2.getFontMetrics(component,g);
  int nextX=x;
  char[] txt=s.array;
  int txtOffset=s.offset;
  int flushLen=0;
  int flushIndex=s.offset;
  int spaceAddon=0;
  int spaceAddonLeftoverEnd=-1;
  int startJustifiableContent=0;
  int endJustifiableContent=0;
  if (justificationData != null) {
    int offset=-startOffset + txtOffset;
    View parent=null;
    if (view != null && (parent=view.getParent()) != null) {
      offset+=parent.getStartOffset();
    }
    spaceAddon=justificationData[Row.SPACE_ADDON];
    spaceAddonLeftoverEnd=justificationData[Row.SPACE_ADDON_LEFTOVER_END] + offset;
    startJustifiableContent=justificationData[Row.START_JUSTIFIABLE] + offset;
    endJustifiableContent=justificationData[Row.END_JUSTIFIABLE] + offset;
  }
  int n=s.offset + s.count;
  for (int i=txtOffset; i < n; i++) {
    if (txt[i] == '\t' || ((spaceAddon != 0 || i <= spaceAddonLeftoverEnd) && (txt[i] == ' ') && startJustifiableContent <= i && i <= endJustifiableContent)) {
      if (flushLen > 0) {
        nextX=SwingUtilities2.drawChars(component,g,txt,flushIndex,flushLen,x,y);
        flushLen=0;
      }
      flushIndex=i + 1;
      if (txt[i] == '\t') {
        if (e != null) {
          nextX=(int)e.nextTabStop((float)nextX,startOffset + i - txtOffset);
        }
 else {
          nextX+=metrics.charWidth(' ');
        }
      }
 else       if (txt[i] == ' ') {
        nextX+=metrics.charWidth(' ') + spaceAddon;
        if (i <= spaceAddonLeftoverEnd) {
          nextX++;
        }
      }
      x=nextX;
    }
 else     if ((txt[i] == '\n') || (txt[i] == '\r')) {
      if (flushLen > 0) {
        nextX=SwingUtilities2.drawChars(component,g,txt,flushIndex,flushLen,x,y);
        flushLen=0;
      }
      flushIndex=i + 1;
      x=nextX;
    }
 else {
      flushLen+=1;
    }
  }
  if (flushLen > 0) {
    nextX=SwingUtilities2.drawChars(component,g,txt,flushIndex,flushLen,x,y);
  }
  return nextX;
}
static final int getTabbedTextWidth(View view,Segment s,FontMetrics metrics,int x,TabExpander e,int startOffset,int[] justificationData){
  int nextX=x;
  char[] txt=s.array;
  int txtOffset=s.offset;
  int n=s.offset + s.count;
  int charCount=0;
  int spaceAddon=0;
  int spaceAddonLeftoverEnd=-1;
  int startJustifiableContent=0;
  int endJustifiableContent=0;
  if (justificationData != null) {
    int offset=-startOffset + txtOffset;
    View parent=null;
    if (view != null && (parent=view.getParent()) != null) {
      offset+=parent.getStartOffset();
    }
    spaceAddon=justificationData[Row.SPACE_ADDON];
    spaceAddonLeftoverEnd=justificationData[Row.SPACE_ADDON_LEFTOVER_END] + offset;
    startJustifiableContent=justificationData[Row.START_JUSTIFIABLE] + offset;
    endJustifiableContent=justificationData[Row.END_JUSTIFIABLE] + offset;
  }
  for (int i=txtOffset; i < n; i++) {
    if (txt[i] == '\t' || ((spaceAddon != 0 || i <= spaceAddonLeftoverEnd) && (txt[i] == ' ') && startJustifiableContent <= i && i <= endJustifiableContent)) {
      nextX+=metrics.charsWidth(txt,i - charCount,charCount);
      charCount=0;
      if (txt[i] == '\t') {
        if (e != null) {
          nextX=(int)e.nextTabStop((float)nextX,startOffset + i - txtOffset);
        }
 else {
          nextX+=metrics.charWidth(' ');
        }
      }
 else       if (txt[i] == ' ') {
        nextX+=metrics.charWidth(' ') + spaceAddon;
        if (i <= spaceAddonLeftoverEnd) {
          nextX++;
        }
      }
    }
 else     if (txt[i] == '\n') {
      nextX+=metrics.charsWidth(txt,i - charCount,charCount);
      charCount=0;
    }
 else {
      charCount++;
    }
  }
  nextX+=metrics.charsWidth(txt,n - charCount,charCount);
  return nextX - x;
}
