jdk_src\java\io\ObjectOutputStream.java
/** 
 * Write the non-static and non-transient fields of the current class to this stream.  This may only be called from the writeObject method of the class being serialized. It will throw the NotActiveException if it is called otherwise.
 * @throws IOException if I/O errors occur while writing to the underlying<code>OutputStream</code>
 */
public void defaultWriteObject() throws IOException {
  if (curContext == null) {
    throw new NotActiveException("not in call to writeObject");
  }
  Object curObj=curContext.getObj();
  ObjectStreamClass curDesc=curContext.getDesc();
  bout.setBlockDataMode(false);
  defaultWriteFields(curObj,curDesc);
  bout.setBlockDataMode(true);
}
/** 
 * Writes class descriptor representing a dynamic proxy class to stream.
 */
private void writeProxyDesc(ObjectStreamClass desc,boolean unshared) throws IOException {
  bout.writeByte(TC_PROXYCLASSDESC);
  handles.assign(unshared ? null : desc);
  Class cl=desc.forClass();
  Class[] ifaces=cl.getInterfaces();
  bout.writeInt(ifaces.length);
  for (int i=0; i < ifaces.length; i++) {
    bout.writeUTF(ifaces[i].getName());
  }
  bout.setBlockDataMode(true);
  if (isCustomSubclass()) {
    ReflectUtil.checkPackageAccess(cl);
  }
  annotateProxyClass(cl);
  bout.setBlockDataMode(false);
  bout.writeByte(TC_ENDBLOCKDATA);
  writeClassDesc(desc.getSuperDesc(),false);
}
-->
114.0 / 811 = 0.1405672009864365