jdk_src\com\sun\org\apache\xalan\internal\xsltc\compiler\EqualityExpr.java
public void translateDesynthesized(ClassGenerator classGen,MethodGenerator methodGen){
  final Type tleft=_left.getType();
  final InstructionList il=methodGen.getInstructionList();
  if (tleft instanceof BooleanType) {
    _left.translate(classGen,methodGen);
    _right.translate(classGen,methodGen);
    _falseList.add(il.append(_op == Operators.EQ ? (BranchInstruction)new IF_ICMPNE(null) : (BranchInstruction)new IF_ICMPEQ(null)));
  }
 else   if (tleft instanceof NumberType) {
    _left.translate(classGen,methodGen);
    _right.translate(classGen,methodGen);
    if (tleft instanceof RealType) {
      il.append(DCMPG);
      _falseList.add(il.append(_op == Operators.EQ ? (BranchInstruction)new IFNE(null) : (BranchInstruction)new IFEQ(null)));
    }
 else {
      _falseList.add(il.append(_op == Operators.EQ ? (BranchInstruction)new IF_ICMPNE(null) : (BranchInstruction)new IF_ICMPEQ(null)));
    }
  }
 else {
    translate(classGen,methodGen);
    desynthesize(classGen,methodGen);
  }
}
public void translate(ClassGenerator classGen,MethodGenerator methodGen){
  final ConstantPoolGen cpg=classGen.getConstantPool();
  final InstructionList il=methodGen.getInstructionList();
  final Type tleft=_left.getType();
  Type tright=_right.getType();
  if (tleft instanceof BooleanType || tleft instanceof NumberType) {
    translateDesynthesized(classGen,methodGen);
    synthesize(classGen,methodGen);
    return;
  }
  if (tleft instanceof StringType) {
    final int equals=cpg.addMethodref(STRING_CLASS,"equals","(" + OBJECT_SIG + ")Z");
    _left.translate(classGen,methodGen);
    _right.translate(classGen,methodGen);
    il.append(new INVOKEVIRTUAL(equals));
    if (_op == Operators.NE) {
      il.append(ICONST_1);
      il.append(IXOR);
    }
    return;
  }
  BranchHandle truec, falsec;
  if (tleft instanceof ResultTreeType) {
    if (tright instanceof BooleanType) {
      _right.translate(classGen,methodGen);
      if (_op == Operators.NE) {
        il.append(ICONST_1);
        il.append(IXOR);
      }
      return;
    }
    if (tright instanceof RealType) {
      _left.translate(classGen,methodGen);
      tleft.translateTo(classGen,methodGen,Type.Real);
      _right.translate(classGen,methodGen);
      il.append(DCMPG);
      falsec=il.append(_op == Operators.EQ ? (BranchInstruction)new IFNE(null) : (BranchInstruction)new IFEQ(null));
      il.append(ICONST_1);
      truec=il.append(new GOTO(null));
      falsec.setTarget(il.append(ICONST_0));
      truec.setTarget(il.append(NOP));
      return;
    }
    _left.translate(classGen,methodGen);
    tleft.translateTo(classGen,methodGen,Type.String);
    _right.translate(classGen,methodGen);
    if (tright instanceof ResultTreeType) {
      tright.translateTo(classGen,methodGen,Type.String);
    }
    final int equals=cpg.addMethodref(STRING_CLASS,"equals","(" + OBJECT_SIG + ")Z");
    il.append(new INVOKEVIRTUAL(equals));
    if (_op == Operators.NE) {
      il.append(ICONST_1);
      il.append(IXOR);
    }
    return;
  }
  if (tleft instanceof NodeSetType && tright instanceof BooleanType) {
    _left.translate(classGen,methodGen);
    _left.startIterator(classGen,methodGen);
    Type.NodeSet.translateTo(classGen,methodGen,Type.Boolean);
    _right.translate(classGen,methodGen);
    il.append(IXOR);
    if (_op == Operators.EQ) {
      il.append(ICONST_1);
      il.append(IXOR);
    }
    return;
  }
  if (tleft instanceof NodeSetType && tright instanceof StringType) {
    _left.translate(classGen,methodGen);
    _left.startIterator(classGen,methodGen);
    _right.translate(classGen,methodGen);
    il.append(new PUSH(cpg,_op));
    il.append(methodGen.loadDOM());
    final int cmp=cpg.addMethodref(BASIS_LIBRARY_CLASS,"compare","(" + tleft.toSignature() + tright.toSignature()+ "I"+ DOM_INTF_SIG+ ")Z");
    il.append(new INVOKESTATIC(cmp));
    return;
  }
  _left.translate(classGen,methodGen);
  _left.startIterator(classGen,methodGen);
  _right.translate(classGen,methodGen);
  _right.startIterator(classGen,methodGen);
  if (tright instanceof ResultTreeType) {
    tright.translateTo(classGen,methodGen,Type.String);
    tright=Type.String;
  }
  il.append(new PUSH(cpg,_op));
  il.append(methodGen.loadDOM());
  final int compare=cpg.addMethodref(BASIS_LIBRARY_CLASS,"compare","(" + tleft.toSignature() + tright.toSignature()+ "I"+ DOM_INTF_SIG+ ")Z");
  il.append(new INVOKESTATIC(compare));
}
