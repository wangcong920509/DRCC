jdk_src\com\sun\jmx\snmp\daemon\SnmpInformRequest.java
/** 
 * Finalizer of the <CODE>SnmpInformRequest</CODE> objects. This method is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. <P>Sets all the references to this SNMP inform request object to <CODE>null</CODE>.
 */
public void finalize(){
  callback=null;
  varBindList=null;
  internalVarBind=null;
  adaptor=null;
  informSession=null;
  requestPdu=null;
  responsePdu=null;
}
/** 
 * Calls the user implementation of the <CODE>SnmpInformHandler</CODE> interface.
 */
private void handleTimeout(){
  setRequestStatus(stTimeout);
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,SnmpInformRequest.class.getName(),"handleTimeout","Snmp error/index = " + snmpErrorToString(errorStatus) + "/"+ errorIndex+ ". Invoking timeout user defined callback...");
  }
  deleteRequest();
  notifyClient();
  requestPdu=null;
  responsePdu=null;
  internalVarBind=null;
  try {
    if (callback != null)     callback.processSnmpPollTimeout(this);
  }
 catch (  Exception e) {
    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
      SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,SnmpInformRequest.class.getName(),"handleTimeout","Exception generated by user callback",e);
    }
  }
catch (  OutOfMemoryError ome) {
    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
      SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,SnmpInformRequest.class.getName(),"handleTimeout","OutOfMemory Error generated by user callback",ome);
    }
    Thread.currentThread().yield();
  }
  return;
}
-->
75.0 / 618 = 0.12135922330097088