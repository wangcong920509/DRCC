jdk_src\com\sun\org\apache\xerces\internal\dom\AttrImpl.java
/** 
 * NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able to control which mutation events are spawned. This version of the insertBefore operation allows us to do so. It is not intended for use by application programs.
 */
Node internalInsertBefore(Node newChild,Node refChild,boolean replace) throws DOMException {
  CoreDocumentImpl ownerDocument=ownerDocument();
  boolean errorChecking=ownerDocument.errorChecking;
  if (newChild.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE) {
    if (errorChecking) {
      for (Node kid=newChild.getFirstChild(); kid != null; kid=kid.getNextSibling()) {
        if (!ownerDocument.isKidOK(this,kid)) {
          String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);
        }
      }
    }
    while (newChild.hasChildNodes()) {
      insertBefore(newChild.getFirstChild(),refChild);
    }
    return newChild;
  }
  if (newChild == refChild) {
    refChild=refChild.getNextSibling();
    removeChild(newChild);
    insertBefore(newChild,refChild);
    return newChild;
  }
  if (needsSyncChildren()) {
    synchronizeChildren();
  }
  if (errorChecking) {
    if (isReadOnly()) {
      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);
      throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);
    }
    if (newChild.getOwnerDocument() != ownerDocument) {
      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null);
      throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,msg);
    }
    if (!ownerDocument.isKidOK(this,newChild)) {
      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);
      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);
    }
    if (refChild != null && refChild.getParentNode() != this) {
      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_FOUND_ERR",null);
      throw new DOMException(DOMException.NOT_FOUND_ERR,msg);
    }
    boolean treeSafe=true;
    for (NodeImpl a=this; treeSafe && a != null; a=a.parentNode()) {
      treeSafe=newChild != a;
    }
    if (!treeSafe) {
      String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"HIERARCHY_REQUEST_ERR",null);
      throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,msg);
    }
  }
  makeChildNode();
  ownerDocument.insertingNode(this,replace);
  ChildNode newInternal=(ChildNode)newChild;
  Node oldparent=newInternal.parentNode();
  if (oldparent != null) {
    oldparent.removeChild(newInternal);
  }
  ChildNode refInternal=(ChildNode)refChild;
  newInternal.ownerNode=this;
  newInternal.isOwned(true);
  ChildNode firstChild=(ChildNode)value;
  if (firstChild == null) {
    value=newInternal;
    newInternal.isFirstChild(true);
    newInternal.previousSibling=newInternal;
  }
 else {
    if (refInternal == null) {
      ChildNode lastChild=firstChild.previousSibling;
      lastChild.nextSibling=newInternal;
      newInternal.previousSibling=lastChild;
      firstChild.previousSibling=newInternal;
    }
 else {
      if (refChild == firstChild) {
        firstChild.isFirstChild(false);
        newInternal.nextSibling=firstChild;
        newInternal.previousSibling=firstChild.previousSibling;
        firstChild.previousSibling=newInternal;
        value=newInternal;
        newInternal.isFirstChild(true);
      }
 else {
        ChildNode prev=refInternal.previousSibling;
        newInternal.nextSibling=refInternal;
        prev.nextSibling=newInternal;
        refInternal.previousSibling=newInternal;
        newInternal.previousSibling=prev;
      }
    }
  }
  changed();
  ownerDocument.insertedNode(this,newInternal,replace);
  checkNormalizationAfterInsert(newInternal);
  return newChild;
}
/** 
 * Make newChild occupy the location that oldChild used to have. Note that newChild will first be removed from its previous parent, if any. Equivalent to inserting newChild before oldChild, then removing oldChild.
 * @return oldChild, in its new state (removed).
 * @throws DOMException (HIERARCHY_REQUEST_ERR) if newChild is of a type that shouldn't be a child of this node, or if newChild is one of our ancestors.
 * @throws DOMException (WRONG_DOCUMENT_ERR) if newChild has a different owner document than we do.
 * @throws DOMException (NOT_FOUND_ERR) if oldChild is not a child of this node.
 * @throws DOMException (NO_MODIFICATION_ALLOWED_ERR) if this node is read-only.
 */
public Node replaceChild(Node newChild,Node oldChild) throws DOMException {
  makeChildNode();
  CoreDocumentImpl ownerDocument=ownerDocument();
  ownerDocument.replacingNode(this);
  internalInsertBefore(newChild,oldChild,true);
  if (newChild != oldChild) {
    internalRemoveChild(oldChild,true);
  }
  ownerDocument.replacedNode(this);
  return oldChild;
}
-->
293.0 / 6094 = 0.048080078765999346