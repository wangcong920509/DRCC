jdk_src\com\sun\org\apache\xalan\internal\xsltc\compiler\Number.java
private void compileDefault(ClassGenerator classGen,MethodGenerator methodGen){
  int index;
  ConstantPoolGen cpg=classGen.getConstantPool();
  InstructionList il=methodGen.getInstructionList();
  int[] fieldIndexes=getXSLTC().getNumberFieldIndexes();
  if (fieldIndexes[_level] == -1) {
    Field defaultNode=new Field(ACC_PRIVATE,cpg.addUtf8(FieldNames[_level]),cpg.addUtf8(NODE_COUNTER_SIG),null,cpg.getConstantPool());
    classGen.addField(defaultNode);
    fieldIndexes[_level]=cpg.addFieldref(classGen.getClassName(),FieldNames[_level],NODE_COUNTER_SIG);
  }
  il.append(classGen.loadTranslet());
  il.append(new GETFIELD(fieldIndexes[_level]));
  final BranchHandle ifBlock1=il.append(new IFNONNULL(null));
  index=cpg.addMethodref(ClassNames[_level],"getDefaultNodeCounter","(" + TRANSLET_INTF_SIG + DOM_INTF_SIG+ NODE_ITERATOR_SIG+ ")"+ NODE_COUNTER_SIG);
  il.append(classGen.loadTranslet());
  il.append(methodGen.loadDOM());
  il.append(methodGen.loadIterator());
  il.append(new INVOKESTATIC(index));
  il.append(DUP);
  il.append(classGen.loadTranslet());
  il.append(SWAP);
  il.append(new PUTFIELD(fieldIndexes[_level]));
  final BranchHandle ifBlock2=il.append(new GOTO(null));
  ifBlock1.setTarget(il.append(classGen.loadTranslet()));
  il.append(new GETFIELD(fieldIndexes[_level]));
  ifBlock2.setTarget(il.append(NOP));
}
private void compilePatterns(ClassGenerator classGen,MethodGenerator methodGen){
  int current;
  int field;
  LocalVariableGen local;
  MatchGenerator matchGen;
  NodeCounterGenerator nodeCounterGen;
  _className=getXSLTC().getHelperClassName();
  nodeCounterGen=new NodeCounterGenerator(_className,ClassNames[_level],toString(),ACC_PUBLIC | ACC_SUPER,null,classGen.getStylesheet());
  InstructionList il=null;
  ConstantPoolGen cpg=nodeCounterGen.getConstantPool();
  final int closureLen=(_closureVars == null) ? 0 : _closureVars.size();
  for (int i=0; i < closureLen; i++) {
    VariableBase var=((VariableRefBase)_closureVars.get(i)).getVariable();
    nodeCounterGen.addField(new Field(ACC_PUBLIC,cpg.addUtf8(var.getEscapedName()),cpg.addUtf8(var.getType().toSignature()),null,cpg.getConstantPool()));
  }
  compileConstructor(nodeCounterGen);
  if (_from != null) {
    il=new InstructionList();
    matchGen=new MatchGenerator(ACC_PUBLIC | ACC_FINAL,com.sun.org.apache.bcel.internal.generic.Type.BOOLEAN,new com.sun.org.apache.bcel.internal.generic.Type[]{com.sun.org.apache.bcel.internal.generic.Type.INT},new String[]{"node"},"matchesFrom",_className,il,cpg);
    compileLocals(nodeCounterGen,matchGen,il);
    il.append(matchGen.loadContextNode());
    _from.translate(nodeCounterGen,matchGen);
    _from.synthesize(nodeCounterGen,matchGen);
    il.append(IRETURN);
    nodeCounterGen.addMethod(matchGen);
  }
  if (_count != null) {
    il=new InstructionList();
    matchGen=new MatchGenerator(ACC_PUBLIC | ACC_FINAL,com.sun.org.apache.bcel.internal.generic.Type.BOOLEAN,new com.sun.org.apache.bcel.internal.generic.Type[]{com.sun.org.apache.bcel.internal.generic.Type.INT},new String[]{"node"},"matchesCount",_className,il,cpg);
    compileLocals(nodeCounterGen,matchGen,il);
    il.append(matchGen.loadContextNode());
    _count.translate(nodeCounterGen,matchGen);
    _count.synthesize(nodeCounterGen,matchGen);
    il.append(IRETURN);
    nodeCounterGen.addMethod(matchGen);
  }
  getXSLTC().dumpClass(nodeCounterGen.getJavaClass());
  cpg=classGen.getConstantPool();
  il=methodGen.getInstructionList();
  final int index=cpg.addMethodref(_className,"<init>","(" + TRANSLET_INTF_SIG + DOM_INTF_SIG+ NODE_ITERATOR_SIG+ "Z)V");
  il.append(new NEW(cpg.addClass(_className)));
  il.append(DUP);
  il.append(classGen.loadTranslet());
  il.append(methodGen.loadDOM());
  il.append(methodGen.loadIterator());
  il.append(_from != null ? ICONST_1 : ICONST_0);
  il.append(new INVOKESPECIAL(index));
  for (int i=0; i < closureLen; i++) {
    final VariableRefBase varRef=(VariableRefBase)_closureVars.get(i);
    final VariableBase var=varRef.getVariable();
    final Type varType=var.getType();
    il.append(DUP);
    il.append(var.loadInstruction());
    il.append(new PUTFIELD(cpg.addFieldref(_className,var.getEscapedName(),varType.toSignature())));
  }
}
