jdk_src\com\sun\org\apache\xerces\internal\impl\xpath\regex\RangeToken.java
protected void mergeRanges(Token token){
  RangeToken tok=(RangeToken)token;
  this.sortRanges();
  tok.sortRanges();
  if (tok.ranges == null)   return;
  this.icaseCache=null;
  this.setSorted(true);
  if (this.ranges == null) {
    this.ranges=new int[tok.ranges.length];
    System.arraycopy(tok.ranges,0,this.ranges,0,tok.ranges.length);
    return;
  }
  int[] result=new int[this.ranges.length + tok.ranges.length];
  for (int i=0, j=0, k=0; i < this.ranges.length || j < tok.ranges.length; ) {
    if (i >= this.ranges.length) {
      result[k++]=tok.ranges[j++];
      result[k++]=tok.ranges[j++];
    }
 else     if (j >= tok.ranges.length) {
      result[k++]=this.ranges[i++];
      result[k++]=this.ranges[i++];
    }
 else     if (tok.ranges[j] < this.ranges[i] || tok.ranges[j] == this.ranges[i] && tok.ranges[j + 1] < this.ranges[i + 1]) {
      result[k++]=tok.ranges[j++];
      result[k++]=tok.ranges[j++];
    }
 else {
      result[k++]=this.ranges[i++];
      result[k++]=this.ranges[i++];
    }
  }
  this.ranges=result;
}
/** 
 * @param tok Ignore whether it is NRANGE or not.
 */
protected void intersectRanges(Token token){
  RangeToken tok=(RangeToken)token;
  if (tok.ranges == null || this.ranges == null)   return;
  this.icaseCache=null;
  this.sortRanges();
  this.compactRanges();
  tok.sortRanges();
  tok.compactRanges();
  int[] result=new int[this.ranges.length + tok.ranges.length];
  int wp=0, src1=0, src2=0;
  while (src1 < this.ranges.length && src2 < tok.ranges.length) {
    int src1begin=this.ranges[src1];
    int src1end=this.ranges[src1 + 1];
    int src2begin=tok.ranges[src2];
    int src2end=tok.ranges[src2 + 1];
    if (src1end < src2begin) {
      src1+=2;
    }
 else     if (src1end >= src2begin && src1begin <= src2end) {
      if (src2begin <= src2begin && src1end <= src2end) {
        result[wp++]=src1begin;
        result[wp++]=src1end;
        src1+=2;
      }
 else       if (src2begin <= src1begin) {
        result[wp++]=src1begin;
        result[wp++]=src2end;
        this.ranges[src1]=src2end + 1;
        src2+=2;
      }
 else       if (src1end <= src2end) {
        result[wp++]=src2begin;
        result[wp++]=src1end;
        src1+=2;
      }
 else {
        result[wp++]=src2begin;
        result[wp++]=src2end;
        this.ranges[src1]=src2end + 1;
      }
    }
 else     if (src2end < src1begin) {
      src2+=2;
    }
 else {
      throw new RuntimeException("Token#intersectRanges(): Internal Error: [" + this.ranges[src1] + ","+ this.ranges[src1 + 1]+ "] & ["+ tok.ranges[src2]+ ","+ tok.ranges[src2 + 1]+ "]");
    }
  }
  while (src1 < this.ranges.length) {
    result[wp++]=this.ranges[src1++];
    result[wp++]=this.ranges[src1++];
  }
  this.ranges=new int[wp];
  System.arraycopy(result,0,this.ranges,0,wp);
}
-->
155.0 / 2531 = 0.061240616357171075