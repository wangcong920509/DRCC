jdk_src\javax\swing\text\GlyphPainter1.java
/** 
 * Paints the glyphs representing the given range.
 */
public void paint(GlyphView v,Graphics g,Shape a,int p0,int p1){
  sync(v);
  Segment text;
  TabExpander expander=v.getTabExpander();
  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();
  int x=alloc.x;
  int p=v.getStartOffset();
  int[] justificationData=getJustificationData(v);
  if (p != p0) {
    text=v.getText(p,p0);
    int width=Utilities.getTabbedTextWidth(v,text,metrics,x,expander,p,justificationData);
    x+=width;
    SegmentCache.releaseSharedSegment(text);
  }
  int y=alloc.y + metrics.getHeight() - metrics.getDescent();
  text=v.getText(p0,p1);
  g.setFont(metrics.getFont());
  Utilities.drawTabbedText(v,text,x,y,g,expander,p0,justificationData);
  SegmentCache.releaseSharedSegment(text);
}
/** 
 * Provides a mapping from the view coordinate space to the logical coordinate space of the model.
 * @param v the view containing the view coordinates
 * @param x the X coordinate
 * @param y the Y coordinate
 * @param a the allocated region to render into
 * @param biasReturn always returns <code>Position.Bias.Forward</code>as the zero-th element of this array
 * @return the location within the model that best represents thegiven point in the view
 * @see View#viewToModel
 */
public int viewToModel(GlyphView v,float x,float y,Shape a,Position.Bias[] biasReturn){
  sync(v);
  Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();
  int p0=v.getStartOffset();
  int p1=v.getEndOffset();
  TabExpander expander=v.getTabExpander();
  Segment text=v.getText(p0,p1);
  int[] justificationData=getJustificationData(v);
  int offs=Utilities.getTabbedTextOffset(v,text,metrics,alloc.x,(int)x,expander,p0,justificationData);
  SegmentCache.releaseSharedSegment(text);
  int retValue=p0 + offs;
  if (retValue == p1) {
    retValue--;
  }
  biasReturn[0]=Position.Bias.Forward;
  return retValue;
}
