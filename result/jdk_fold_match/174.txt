jdk_src\java\security\spec\ECFieldF2m.java
/** 
 * Creates an elliptic curve characteristic 2 finite field which has 2^<code>m</code> elements with normal basis.
 * @param m with 2^<code>m</code> being the number of elements.
 * @exception IllegalArgumentException if <code>m</code>is not positive.
 */
public ECFieldF2m(int m){
  if (m <= 0) {
    throw new IllegalArgumentException("m is not positive");
  }
  this.m=m;
  this.ks=null;
  this.rp=null;
}
/** 
 * Creates an elliptic curve characteristic 2 finite field which has 2^<code>m</code> elements with polynomial basis. The reduction polynomial for this field is based on <code>ks</code> whose content contains the order of the middle term(s) of the reduction polynomial. Note: A valid reduction polynomial is either a trinomial (X^<code>m</code> + X^<code>k</code> + 1 with <code>m</code> > <code>k</code> >= 1) or a pentanomial (X^<code>m</code> + X^<code>k3</code> + X^<code>k2</code> + X^<code>k1</code> + 1 with <code>m</code> > <code>k3</code> > <code>k2</code> > <code>k1</code> >= 1), so <code>ks</code> should have length 1 or 3.
 * @param m with 2^<code>m</code> being the number of elements.
 * @param ks the order of the middle term(s) of thereduction polynomial. Contents of this array are copied to protect against subsequent modification.
 * @exception NullPointerException if <code>ks</code> is null.
 * @exception IllegalArgumentException if<code>m</code>is not positive, or the length of <code>ks</code> is neither 1 nor 3, or values in <code>ks</code> are not between <code>m</code>-1 and 1 (inclusive) and in descending order.
 */
public ECFieldF2m(int m,int[] ks){
  this.m=m;
  this.ks=ks.clone();
  if (m <= 0) {
    throw new IllegalArgumentException("m is not positive");
  }
  if ((this.ks.length != 1) && (this.ks.length != 3)) {
    throw new IllegalArgumentException("length of ks is neither 1 nor 3");
  }
  for (int i=0; i < this.ks.length; i++) {
    if ((this.ks[i] < 1) || (this.ks[i] > m - 1)) {
      throw new IllegalArgumentException("ks[" + i + "] is out of range");
    }
    if ((i != 0) && (this.ks[i] >= this.ks[i - 1])) {
      throw new IllegalArgumentException("values in ks are not in descending order");
    }
  }
  this.rp=BigInteger.ONE;
  this.rp=rp.setBit(m);
  for (int j=0; j < this.ks.length; j++) {
    rp=rp.setBit(this.ks[j]);
  }
}
-->
34.0 / 713 = 0.047685834502103785