jdk_src\java\util\BitSet.java
/** 
 * Sets the bits from the specified  {@code fromIndex} (inclusive) to thespecified  {@code toIndex} (exclusive) to {@code true}.
 * @param fromIndex index of the first bit to be set
 * @param toIndex index after the last bit to be set
 * @throws IndexOutOfBoundsException if {@code fromIndex} is negative,or  {@code toIndex} is negative, or {@code fromIndex} islarger than  {@code toIndex}
 * @since  1.4
 */
public void set(int fromIndex,int toIndex){
  checkRange(fromIndex,toIndex);
  if (fromIndex == toIndex)   return;
  int startWordIndex=wordIndex(fromIndex);
  int endWordIndex=wordIndex(toIndex - 1);
  expandTo(endWordIndex);
  long firstWordMask=WORD_MASK << fromIndex;
  long lastWordMask=WORD_MASK >>> -toIndex;
  if (startWordIndex == endWordIndex) {
    words[startWordIndex]|=(firstWordMask & lastWordMask);
  }
 else {
    words[startWordIndex]|=firstWordMask;
    for (int i=startWordIndex + 1; i < endWordIndex; i++)     words[i]=WORD_MASK;
    words[endWordIndex]|=lastWordMask;
  }
  checkInvariants();
}
/** 
 * Returns a new  {@code BitSet} composed of bits from this {@code BitSet}from  {@code fromIndex} (inclusive) to {@code toIndex} (exclusive).
 * @param fromIndex index of the first bit to include
 * @param toIndex index after the last bit to include
 * @return a new {@code BitSet} from a range of this {@code BitSet}
 * @throws IndexOutOfBoundsException if {@code fromIndex} is negative,or  {@code toIndex} is negative, or {@code fromIndex} islarger than  {@code toIndex}
 * @since  1.4
 */
public BitSet get(int fromIndex,int toIndex){
  checkRange(fromIndex,toIndex);
  checkInvariants();
  int len=length();
  if (len <= fromIndex || fromIndex == toIndex)   return new BitSet(0);
  if (toIndex > len)   toIndex=len;
  BitSet result=new BitSet(toIndex - fromIndex);
  int targetWords=wordIndex(toIndex - fromIndex - 1) + 1;
  int sourceIndex=wordIndex(fromIndex);
  boolean wordAligned=((fromIndex & BIT_INDEX_MASK) == 0);
  for (int i=0; i < targetWords - 1; i++, sourceIndex++)   result.words[i]=wordAligned ? words[sourceIndex] : (words[sourceIndex] >>> fromIndex) | (words[sourceIndex + 1] << -fromIndex);
  long lastWordMask=WORD_MASK >>> -toIndex;
  result.words[targetWords - 1]=((toIndex - 1) & BIT_INDEX_MASK) < (fromIndex & BIT_INDEX_MASK) ? ((words[sourceIndex] >>> fromIndex) | (words[sourceIndex + 1] & lastWordMask) << -fromIndex) : ((words[sourceIndex] & lastWordMask) >>> fromIndex);
  result.wordsInUse=targetWords;
  result.recalculateWordsInUse();
  result.checkInvariants();
  return result;
}
-->
172.0 / 1866 = 0.09217577706323687