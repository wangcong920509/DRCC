jdk_src\javax\swing\JTable.java
/** 
 * Called to get the block increment for upward scrolling in cases of horizontal scrolling, or for vertical scrolling of a table with variable row heights.
 */
private int getPreviousBlockIncrement(Rectangle visibleRect,int orientation){
  int row;
  int col;
  int newEdge;
  Point newCellLoc;
  int visibleLeadingEdge=leadingEdge(visibleRect,orientation);
  boolean leftToRight=getComponentOrientation().isLeftToRight();
  int newLeadingEdge;
  if (orientation == SwingConstants.VERTICAL) {
    newEdge=visibleLeadingEdge - visibleRect.height;
    int x=visibleRect.x + (leftToRight ? 0 : visibleRect.width);
    newCellLoc=new Point(x,newEdge);
  }
 else   if (leftToRight) {
    newEdge=visibleLeadingEdge - visibleRect.width;
    newCellLoc=new Point(newEdge,visibleRect.y);
  }
 else {
    newEdge=visibleLeadingEdge + visibleRect.width;
    newCellLoc=new Point(newEdge - 1,visibleRect.y);
  }
  row=rowAtPoint(newCellLoc);
  col=columnAtPoint(newCellLoc);
  if (orientation == SwingConstants.VERTICAL & row < 0) {
    newLeadingEdge=0;
  }
 else   if (orientation == SwingConstants.HORIZONTAL & col < 0) {
    if (leftToRight) {
      newLeadingEdge=0;
    }
 else {
      newLeadingEdge=getWidth();
    }
  }
 else {
    Rectangle newCellRect=getCellRect(row,col,true);
    int newCellLeadingEdge=leadingEdge(newCellRect,orientation);
    int newCellTrailingEdge=trailingEdge(newCellRect,orientation);
    if ((orientation == SwingConstants.VERTICAL || leftToRight) && (newCellTrailingEdge >= visibleLeadingEdge)) {
      newLeadingEdge=newCellLeadingEdge;
    }
 else     if (orientation == SwingConstants.HORIZONTAL && !leftToRight && newCellTrailingEdge <= visibleLeadingEdge) {
      newLeadingEdge=newCellLeadingEdge;
    }
 else     if (newEdge == newCellLeadingEdge) {
      newLeadingEdge=newCellLeadingEdge;
    }
 else {
      newLeadingEdge=newCellTrailingEdge;
    }
  }
  return Math.abs(visibleLeadingEdge - newLeadingEdge);
}
/** 
 * Called to get the block increment for downward scrolling in cases of horizontal scrolling, or for vertical scrolling of a table with variable row heights.
 */
private int getNextBlockIncrement(Rectangle visibleRect,int orientation){
  int trailingRow=getTrailingRow(visibleRect);
  int trailingCol=getTrailingCol(visibleRect);
  Rectangle cellRect;
  boolean cellFillsVis;
  int cellLeadingEdge;
  int cellTrailingEdge;
  int newLeadingEdge;
  int visibleLeadingEdge=leadingEdge(visibleRect,orientation);
  if (orientation == SwingConstants.VERTICAL && trailingRow < 0) {
    return visibleRect.height;
  }
 else   if (orientation == SwingConstants.HORIZONTAL && trailingCol < 0) {
    return visibleRect.width;
  }
  cellRect=getCellRect(trailingRow,trailingCol,true);
  cellLeadingEdge=leadingEdge(cellRect,orientation);
  cellTrailingEdge=trailingEdge(cellRect,orientation);
  if (orientation == SwingConstants.VERTICAL || getComponentOrientation().isLeftToRight()) {
    cellFillsVis=cellLeadingEdge <= visibleLeadingEdge;
  }
 else {
    cellFillsVis=cellLeadingEdge >= visibleLeadingEdge;
  }
  if (cellFillsVis) {
    newLeadingEdge=cellTrailingEdge;
  }
 else   if (cellTrailingEdge == trailingEdge(visibleRect,orientation)) {
    newLeadingEdge=cellTrailingEdge;
  }
 else {
    newLeadingEdge=cellLeadingEdge;
  }
  return Math.abs(newLeadingEdge - visibleLeadingEdge);
}
-->
72.0 / 1955 = 0.03682864450127877