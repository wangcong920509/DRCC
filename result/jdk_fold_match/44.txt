jdk_src\com\sun\org\apache\xalan\internal\xsltc\compiler\Key.java
/** 
 * This method is called if the "use" attribute of the key contains a node set. In this case we must traverse all nodes in the set and create one entry in this key's index for each node in the set.
 */
public void traverseNodeSet(ClassGenerator classGen,MethodGenerator methodGen,int buildKeyIndex){
  final ConstantPoolGen cpg=classGen.getConstantPool();
  final InstructionList il=methodGen.getInstructionList();
  final int getNodeValue=cpg.addInterfaceMethodref(DOM_INTF,GET_NODE_VALUE,"(I)" + STRING_SIG);
  final int getNodeIdent=cpg.addInterfaceMethodref(DOM_INTF,"getNodeIdent","(I)" + NODE_SIG);
  final int keyDom=cpg.addMethodref(TRANSLET_CLASS,"setKeyIndexDom","(" + STRING_SIG + DOM_INTF_SIG+ ")V");
  final LocalVariableGen parentNode=methodGen.addLocalVariable("parentNode",Util.getJCRefType("I"),null,null);
  parentNode.setStart(il.append(new ISTORE(parentNode.getIndex())));
  il.append(methodGen.loadCurrentNode());
  il.append(methodGen.loadIterator());
  _use.translate(classGen,methodGen);
  _use.startIterator(classGen,methodGen);
  il.append(methodGen.storeIterator());
  final BranchHandle nextNode=il.append(new GOTO(null));
  final InstructionHandle loop=il.append(NOP);
  il.append(classGen.loadTranslet());
  il.append(new PUSH(cpg,_name.toString()));
  parentNode.setEnd(il.append(new ILOAD(parentNode.getIndex())));
  il.append(methodGen.loadDOM());
  il.append(methodGen.loadCurrentNode());
  il.append(new INVOKEINTERFACE(getNodeValue,2));
  il.append(new INVOKEVIRTUAL(buildKeyIndex));
  il.append(classGen.loadTranslet());
  il.append(new PUSH(cpg,getName()));
  il.append(methodGen.loadDOM());
  il.append(new INVOKEVIRTUAL(keyDom));
  nextNode.setTarget(il.append(methodGen.loadIterator()));
  il.append(methodGen.nextNode());
  il.append(DUP);
  il.append(methodGen.storeCurrentNode());
  il.append(new IFGE(loop));
  il.append(methodGen.storeIterator());
  il.append(methodGen.storeCurrentNode());
}
/** 
 * Gather all nodes that match the expression in the attribute "match" and add one (or more) entries in this key's index.
 */
public void translate(ClassGenerator classGen,MethodGenerator methodGen){
  final ConstantPoolGen cpg=classGen.getConstantPool();
  final InstructionList il=methodGen.getInstructionList();
  final int current=methodGen.getLocalIndex("current");
  final int key=cpg.addMethodref(TRANSLET_CLASS,"buildKeyIndex","(" + STRING_SIG + "I"+ OBJECT_SIG+ ")V");
  final int keyDom=cpg.addMethodref(TRANSLET_CLASS,"setKeyIndexDom","(" + STRING_SIG + DOM_INTF_SIG+ ")V");
  final int getNodeIdent=cpg.addInterfaceMethodref(DOM_INTF,"getNodeIdent","(I)" + NODE_SIG);
  final int git=cpg.addInterfaceMethodref(DOM_INTF,"getAxisIterator","(I)" + NODE_ITERATOR_SIG);
  il.append(methodGen.loadCurrentNode());
  il.append(methodGen.loadIterator());
  il.append(methodGen.loadDOM());
  il.append(new PUSH(cpg,Axis.DESCENDANT));
  il.append(new INVOKEINTERFACE(git,2));
  il.append(methodGen.loadCurrentNode());
  il.append(methodGen.setStartNode());
  il.append(methodGen.storeIterator());
  final BranchHandle nextNode=il.append(new GOTO(null));
  final InstructionHandle loop=il.append(NOP);
  il.append(methodGen.loadCurrentNode());
  _match.translate(classGen,methodGen);
  _match.synthesize(classGen,methodGen);
  final BranchHandle skipNode=il.append(new IFEQ(null));
  if (_useType instanceof NodeSetType) {
    il.append(methodGen.loadCurrentNode());
    traverseNodeSet(classGen,methodGen,key);
  }
 else {
    il.append(classGen.loadTranslet());
    il.append(DUP);
    il.append(new PUSH(cpg,_name.toString()));
    il.append(DUP_X1);
    il.append(methodGen.loadCurrentNode());
    _use.translate(classGen,methodGen);
    il.append(new INVOKEVIRTUAL(key));
    il.append(methodGen.loadDOM());
    il.append(new INVOKEVIRTUAL(keyDom));
  }
  final InstructionHandle skip=il.append(NOP);
  il.append(methodGen.loadIterator());
  il.append(methodGen.nextNode());
  il.append(DUP);
  il.append(methodGen.storeCurrentNode());
  il.append(new IFGT(loop));
  il.append(methodGen.storeIterator());
  il.append(methodGen.storeCurrentNode());
  nextNode.setTarget(skip);
  skipNode.setTarget(skip);
}
-->
632.0 / 11057 = 0.0571583612191372