jdk_src\java\math\MutableBigInteger.java
/** 
 * Right shift this MutableBigInteger n bits. The MutableBigInteger is left in normal form.
 */
void rightShift(int n){
  if (intLen == 0)   return;
  int nInts=n >>> 5;
  int nBits=n & 0x1F;
  this.intLen-=nInts;
  if (nBits == 0)   return;
  int bitsInHighWord=BigInteger.bitLengthForInt(value[offset]);
  if (nBits >= bitsInHighWord) {
    this.primitiveLeftShift(32 - nBits);
    this.intLen--;
  }
 else {
    primitiveRightShift(nBits);
  }
}
/** 
 * Left shift this MutableBigInteger n bits.
 */
void leftShift(int n){
  if (intLen == 0)   return;
  int nInts=n >>> 5;
  int nBits=n & 0x1F;
  int bitsInHighWord=BigInteger.bitLengthForInt(value[offset]);
  if (n <= (32 - bitsInHighWord)) {
    primitiveLeftShift(nBits);
    return;
  }
  int newLen=intLen + nInts + 1;
  if (nBits <= (32 - bitsInHighWord))   newLen--;
  if (value.length < newLen) {
    int[] result=new int[newLen];
    for (int i=0; i < intLen; i++)     result[i]=value[offset + i];
    setValue(result,newLen);
  }
 else   if (value.length - offset >= newLen) {
    for (int i=0; i < newLen - intLen; i++)     value[offset + intLen + i]=0;
  }
 else {
    for (int i=0; i < intLen; i++)     value[i]=value[offset + i];
    for (int i=intLen; i < newLen; i++)     value[i]=0;
    offset=0;
  }
  intLen=newLen;
  if (nBits == 0)   return;
  if (nBits <= (32 - bitsInHighWord))   primitiveLeftShift(nBits);
 else   primitiveRightShift(32 - nBits);
}
-->
215.0 / 1153 = 0.18647007805724197