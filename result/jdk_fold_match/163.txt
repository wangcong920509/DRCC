jdk_src\java\net\IDN.java
private static String toASCIIInternal(String label,int flag){
  boolean isASCII=isAllASCII(label);
  StringBuffer dest;
  if (!isASCII) {
    UCharacterIterator iter=UCharacterIterator.getInstance(label);
    try {
      dest=namePrep.prepare(iter,flag);
    }
 catch (    java.text.ParseException e) {
      throw new IllegalArgumentException(e);
    }
  }
 else {
    dest=new StringBuffer(label);
  }
  boolean useSTD3ASCIIRules=((flag & USE_STD3_ASCII_RULES) != 0);
  if (useSTD3ASCIIRules) {
    for (int i=0; i < dest.length(); i++) {
      int c=dest.charAt(i);
      if (!isLDHChar(c)) {
        throw new IllegalArgumentException("Contains non-LDH characters");
      }
    }
    if (dest.charAt(0) == '-' || dest.charAt(dest.length() - 1) == '-') {
      throw new IllegalArgumentException("Has leading or trailing hyphen");
    }
  }
  if (!isASCII) {
    if (!isAllASCII(dest.toString())) {
      if (!startsWithACEPrefix(dest)) {
        try {
          dest=Punycode.encode(dest,null);
        }
 catch (        java.text.ParseException e) {
          throw new IllegalArgumentException(e);
        }
        dest=toASCIILower(dest);
        dest.insert(0,ACE_PREFIX);
      }
 else {
        throw new IllegalArgumentException("The input starts with the ACE Prefix");
      }
    }
  }
  if (dest.length() > MAX_LABEL_LENGTH) {
    throw new IllegalArgumentException("The label in the input is too long");
  }
  return dest.toString();
}
private static String toUnicodeInternal(String label,int flag){
  boolean[] caseFlags=null;
  StringBuffer dest;
  boolean isASCII=isAllASCII(label);
  if (!isASCII) {
    try {
      UCharacterIterator iter=UCharacterIterator.getInstance(label);
      dest=namePrep.prepare(iter,flag);
    }
 catch (    Exception e) {
      return label;
    }
  }
 else {
    dest=new StringBuffer(label);
  }
  if (startsWithACEPrefix(dest)) {
    String temp=dest.substring(ACE_PREFIX_LENGTH,dest.length());
    try {
      StringBuffer decodeOut=Punycode.decode(new StringBuffer(temp),null);
      String toASCIIOut=toASCII(decodeOut.toString(),flag);
      if (toASCIIOut.equalsIgnoreCase(dest.toString())) {
        return decodeOut.toString();
      }
    }
 catch (    Exception ignored) {
    }
  }
  return label;
}
