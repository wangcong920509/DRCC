jdk_src\javax\swing\JTree.java
/** 
 * Returns an instance of <code>JTree</code> which displays the root node -- the tree is created using the specified data model.
 * @param newModel  the <code>TreeModel</code> to use as the data model
 */
@ConstructorProperties({"model"}) public JTree(TreeModel newModel){
  super();
  expandedStack=new Stack<Stack<TreePath>>();
  toggleClickCount=2;
  expandedState=new Hashtable<TreePath,Boolean>();
  setLayout(null);
  rowHeight=16;
  visibleRowCount=20;
  rootVisible=true;
  selectionModel=new DefaultTreeSelectionModel();
  cellRenderer=null;
  scrollsOnExpand=true;
  setOpaque(true);
  expandsSelectedPaths=true;
  updateUI();
  setModel(newModel);
}
private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  expandedState=new Hashtable<TreePath,Boolean>();
  expandedStack=new Stack<Stack<TreePath>>();
  Vector values=(Vector)s.readObject();
  int indexCounter=0;
  int maxCounter=values.size();
  if (indexCounter < maxCounter && values.elementAt(indexCounter).equals("cellRenderer")) {
    cellRenderer=(TreeCellRenderer)values.elementAt(++indexCounter);
    indexCounter++;
  }
  if (indexCounter < maxCounter && values.elementAt(indexCounter).equals("cellEditor")) {
    cellEditor=(TreeCellEditor)values.elementAt(++indexCounter);
    indexCounter++;
  }
  if (indexCounter < maxCounter && values.elementAt(indexCounter).equals("treeModel")) {
    treeModel=(TreeModel)values.elementAt(++indexCounter);
    indexCounter++;
  }
  if (indexCounter < maxCounter && values.elementAt(indexCounter).equals("selectionModel")) {
    selectionModel=(TreeSelectionModel)values.elementAt(++indexCounter);
    indexCounter++;
  }
  if (indexCounter < maxCounter && values.elementAt(indexCounter).equals("expandedState")) {
    unarchiveExpandedState(values.elementAt(++indexCounter));
    indexCounter++;
  }
  if (listenerList.getListenerCount(TreeSelectionListener.class) != 0) {
    selectionRedirector=new TreeSelectionRedirector();
    selectionModel.addTreeSelectionListener(selectionRedirector);
  }
  if (treeModel != null) {
    treeModelListener=createTreeModelListener();
    if (treeModelListener != null)     treeModel.addTreeModelListener(treeModelListener);
  }
}
