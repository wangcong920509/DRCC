jdk_src\java\util\concurrent\ConcurrentHashMap.java
/** 
 * {@inheritDoc}
 * @return the previous value associated with the specified key,or <tt>null</tt> if there was no mapping for the key
 * @throws NullPointerException if the specified key or value is null
 */
@SuppressWarnings("unchecked") public V putIfAbsent(K key,V value){
  Segment<K,V> s;
  if (value == null)   throw new NullPointerException();
  int hash=hash(key);
  int j=(hash >>> segmentShift) & segmentMask;
  if ((s=(Segment<K,V>)UNSAFE.getObject(segments,(j << SSHIFT) + SBASE)) == null)   s=ensureSegment(j);
  return s.put(key,hash,value,true);
}
/** 
 * {@inheritDoc}
 * @return the previous value associated with the specified key,or <tt>null</tt> if there was no mapping for the key
 * @throws NullPointerException if the specified key or value is null
 */
public V replace(K key,V value){
  int hash=hash(key);
  if (value == null)   throw new NullPointerException();
  Segment<K,V> s=segmentForHash(hash);
  return s == null ? null : s.replace(key,hash,value);
}
