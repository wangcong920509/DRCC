jdk_src\java\util\zip\ZipCoder.java
String toString(byte[] ba,int length){
  CharsetDecoder cd=decoder().reset();
  int len=(int)(length * cd.maxCharsPerByte());
  char[] ca=new char[len];
  if (len == 0)   return new String(ca);
  if (isUTF8 && cd instanceof ArrayDecoder) {
    int clen=((ArrayDecoder)cd).decode(ba,0,length,ca);
    if (clen == -1)     throw new IllegalArgumentException("MALFORMED");
    return new String(ca,0,clen);
  }
  ByteBuffer bb=ByteBuffer.wrap(ba,0,length);
  CharBuffer cb=CharBuffer.wrap(ca);
  CoderResult cr=cd.decode(bb,cb,true);
  if (!cr.isUnderflow())   throw new IllegalArgumentException(cr.toString());
  cr=cd.flush(cb);
  if (!cr.isUnderflow())   throw new IllegalArgumentException(cr.toString());
  return new String(ca,0,cb.position());
}
byte[] getBytes(String s){
  CharsetEncoder ce=encoder().reset();
  char[] ca=s.toCharArray();
  int len=(int)(ca.length * ce.maxBytesPerChar());
  byte[] ba=new byte[len];
  if (len == 0)   return ba;
  if (isUTF8 && ce instanceof ArrayEncoder) {
    int blen=((ArrayEncoder)ce).encode(ca,0,ca.length,ba);
    if (blen == -1)     throw new IllegalArgumentException("MALFORMED");
    return Arrays.copyOf(ba,blen);
  }
  ByteBuffer bb=ByteBuffer.wrap(ba);
  CharBuffer cb=CharBuffer.wrap(ca);
  CoderResult cr=ce.encode(cb,bb,true);
  if (!cr.isUnderflow())   throw new IllegalArgumentException(cr.toString());
  cr=ce.flush(bb);
  if (!cr.isUnderflow())   throw new IllegalArgumentException(cr.toString());
  if (bb.position() == ba.length)   return ba;
 else   return Arrays.copyOf(ba,bb.position());
}
