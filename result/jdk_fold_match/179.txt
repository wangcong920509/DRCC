jdk_src\java\util\AbstractList.java
public boolean addAll(int index,Collection<? extends E> c){
  rangeCheckForAdd(index);
  int cSize=c.size();
  if (cSize == 0)   return false;
  checkForComodification();
  l.addAll(offset + index,c);
  this.modCount=l.modCount;
  size+=cSize;
  return true;
}
public ListIterator<E> listIterator(final int index){
  checkForComodification();
  rangeCheckForAdd(index);
  return new ListIterator<E>(){
    private final ListIterator<E> i=l.listIterator(index + offset);
    public boolean hasNext(){
      return nextIndex() < size;
    }
    public E next(){
      if (hasNext())       return i.next();
 else       throw new NoSuchElementException();
    }
    public boolean hasPrevious(){
      return previousIndex() >= 0;
    }
    public E previous(){
      if (hasPrevious())       return i.previous();
 else       throw new NoSuchElementException();
    }
    public int nextIndex(){
      return i.nextIndex() - offset;
    }
    public int previousIndex(){
      return i.previousIndex() - offset;
    }
    public void remove(){
      i.remove();
      SubList.this.modCount=l.modCount;
      size--;
    }
    public void set(    E e){
      i.set(e);
    }
    public void add(    E e){
      i.add(e);
      SubList.this.modCount=l.modCount;
      size++;
    }
  }
;
}
