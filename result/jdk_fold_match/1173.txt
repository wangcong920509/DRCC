jdk_src\javax\swing\text\html\CSSParser.java
/** 
 * Gets an identifier, returning true if the length of the string is greater than 0, stopping when <code>stopChar</code>, whitespace, or one of {}()[] is hit.
 */
private boolean getIdentifier(char stopChar) throws IOException {
  boolean lastWasEscape=false;
  boolean done=false;
  int escapeCount=0;
  int escapeChar=0;
  int nextChar;
  int intStopChar=(int)stopChar;
  short type;
  int escapeOffset=0;
  tokenBufferLength=0;
  while (!done) {
    nextChar=readChar();
switch (nextChar) {
case '\\':
      type=1;
    break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
  type=2;
escapeOffset=nextChar - '0';
break;
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
type=2;
escapeOffset=nextChar - 'a' + 10;
break;
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
type=2;
escapeOffset=nextChar - 'A' + 10;
break;
case '\'':
case '"':
case '[':
case ']':
case '{':
case '}':
case '(':
case ')':
case ' ':
case '\n':
case '\t':
case '\r':
type=3;
break;
case '/':
type=4;
break;
case -1:
done=true;
type=0;
break;
default :
type=0;
break;
}
if (lastWasEscape) {
if (type == 2) {
escapeChar=escapeChar * 16 + escapeOffset;
if (++escapeCount == 4) {
lastWasEscape=false;
append((char)escapeChar);
}
}
 else {
lastWasEscape=false;
if (escapeCount > 0) {
append((char)escapeChar);
pushChar(nextChar);
}
 else if (!done) {
append((char)nextChar);
}
}
}
 else if (!done) {
if (type == 1) {
lastWasEscape=true;
escapeChar=escapeCount=0;
}
 else if (type == 3) {
done=true;
pushChar(nextChar);
}
 else if (type == 4) {
nextChar=readChar();
if (nextChar == '*') {
done=true;
readComment();
readWS=true;
}
 else {
append('/');
if (nextChar == -1) {
done=true;
}
 else {
pushChar(nextChar);
}
}
}
 else {
append((char)nextChar);
if (nextChar == intStopChar) {
done=true;
}
}
}
}
return (tokenBufferLength > 0);
}
/** 
 * Reads till a <code>stopChar</code> is encountered, escaping characters as necessary.
 */
private void readTill(char stopChar) throws IOException {
  boolean lastWasEscape=false;
  int escapeCount=0;
  int escapeChar=0;
  int nextChar;
  boolean done=false;
  int intStopChar=(int)stopChar;
  short type;
  int escapeOffset=0;
  tokenBufferLength=0;
  while (!done) {
    nextChar=readChar();
switch (nextChar) {
case '\\':
      type=1;
    break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
  type=2;
escapeOffset=nextChar - '0';
break;
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
type=2;
escapeOffset=nextChar - 'a' + 10;
break;
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
type=2;
escapeOffset=nextChar - 'A' + 10;
break;
case -1:
throw new RuntimeException("Unclosed " + stopChar);
default :
type=0;
break;
}
if (lastWasEscape) {
if (type == 2) {
escapeChar=escapeChar * 16 + escapeOffset;
if (++escapeCount == 4) {
lastWasEscape=false;
append((char)escapeChar);
}
}
 else {
if (escapeCount > 0) {
append((char)escapeChar);
if (type == 1) {
lastWasEscape=true;
escapeChar=escapeCount=0;
}
 else {
if (nextChar == intStopChar) {
done=true;
}
append((char)nextChar);
lastWasEscape=false;
}
}
 else {
append((char)nextChar);
lastWasEscape=false;
}
}
}
 else if (type == 1) {
lastWasEscape=true;
escapeChar=escapeCount=0;
}
 else {
if (nextChar == intStopChar) {
done=true;
}
append((char)nextChar);
}
}
}
-->
88.0 / 1438 = 0.061196105702364396